{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { finalize, switchMap, filter, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/auth.service\";\nimport * as i2 from \"../service/loader.service\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"../shared/customFunctions/customFunctions\";\nimport * as i5 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authServiceService, loaderService, spinner, customFunctions, _router) {\n      this.authServiceService = authServiceService;\n      this.loaderService = loaderService;\n      this.spinner = spinner;\n      this.customFunctions = customFunctions;\n      this._router = _router;\n      this.isRefershing = false;\n      this.refershTokenSubject = new BehaviorSubject(null);\n      this.count = 0;\n    }\n\n    intercept(request, next) {\n      if (this.count === 0) {\n        this.loaderService.setHttpProgressStatus(true);\n        this.spinner.show();\n        console.log('setHttpProgressStatus true');\n      }\n\n      this.count++; // this.authServiceService.roleMatch(\"Admin\");\n\n      if (this.authServiceService.getJwtToken()) {\n        request = this.addToken(request, 'Bearer ' + this.authServiceService.getJwtToken());\n      }\n\n      if (!request.headers.has('Content-Type')) {\n        request = request.clone({\n          headers: request.headers.set('Content-Type', 'application/json')\n        });\n      }\n\n      request = request.clone({\n        headers: request.headers.set('Accept', 'application/json')\n      });\n      return next.handle(request).pipe(finalize(() => {\n        this.count--;\n\n        if (this.count === 0) {\n          this.loaderService.setHttpProgressStatus(false);\n          this.spinner.hide();\n          console.log('setHttpProgressStatus false');\n        }\n      }));\n    }\n\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: token\n        }\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    handle401Error(request, next) {\n      // if (!this.isRefershing) {\n      //   this.isRefershing = true;\n      //   this.refershTokenSubject.next(null);\n      //   return this.authServiceService.refershToken().pipe(\n      //     switchMap(( token: any ) => {\n      //       this.isRefershing = false;\n      //       this.refershTokenSubject.next(token.jwt);\n      //       return next.handle(this.addToken(request , token.jwt));\n      //     })\n      //   );\n      // this.authServiceService.logout();\n      //   this.isRefershing = true;\n      //   retrun next();\n      // } else {\n      return this.refershTokenSubject.pipe(filter(token => token != null), take(1), switchMap(jwt => {\n        return next.handle(this.addToken(request, jwt));\n      })); // }\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.LoaderService), i0.ɵɵinject(i3.NgxSpinnerService), i0.ɵɵinject(i4.CustomFunctions), i0.ɵɵinject(i5.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}