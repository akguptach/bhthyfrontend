{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/custom.service\";\nimport * as i2 from \"src/app/shared/customFunctions/customFunctions\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../account-footer/account-footer.component\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction ResetPasswordComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" password Not Confirmed \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(customService, _customFunctions, router, activatedRoute, _formBuilder) {\n      this.customService = customService;\n      this._customFunctions = _customFunctions;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this._formBuilder = _formBuilder;\n    }\n\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(params => {\n        console.log(params); // { order: \"popular\" }\n\n        if (params) {\n          this.userId = params.userId;\n          this.token = params.token;\n        } // popular\n\n      });\n      this.resetPasswordForm = this._formBuilder.group({\n        password: ['', Validators.required],\n        passwordConfirm: ['', [Validators.required, confirmPasswordValidator]]\n      }); // Update the validity of the 'passwordConfirm' field\n      // when the 'password' field changes\n\n      this.resetPasswordForm.controls.password.valueChanges.pipe(takeUntil(this._unsubscribeAll)).subscribe(() => {\n        this.resetPasswordForm.controls.passwordConfirm.updateValueAndValidity();\n      });\n    }\n\n    resetPassword() {\n      if (this.resetPasswordForm.invalid) {\n        this._customFunctions.showResponseMessage('please Insert All Form Data', false);\n\n        return;\n      }\n\n      const user = {\n        userId: this.userId,\n        token: this.token,\n        NewPassword: this.resetPasswordForm.controls.password.value\n      };\n      console.log(user);\n      this.customService.post(user, 'Identity/reset-password').subscribe(res => {\n        console.log('res ', res);\n\n        if (Number(res.status) > 300) {\n          this._customFunctions.showResponseMessage(res.message, false);\n        } else {\n          this._customFunctions.showResponseMessage(res.message, true);\n\n          this.router.navigate(['/account/login']);\n        }\n      });\n    }\n\n  }\n\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.CustomService), i0.ɵɵdirectiveInject(i2.CustomFunctions), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.FormBuilder));\n  };\n\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-resetPassword\"]],\n    decls: 22,\n    vars: 8,\n    consts: [[1, \"pt-90\"], [1, \"container\"], [1, \"row\"], [1, \"col-xl-6\", \"col-lg-6\", \"col-md-6\", \"col-sm-12\", \"col-12\", \"offset-md-3\"], [1, \"card\", \"shadow-sm\"], [1, \"card-body\"], [1, \"forget_Form\", 3, \"formGroup\"], [1, \"group\"], [\"for\", \"NewPassword\", 1, \"label\"], [\"id\", \"NewPassword\", \"type\", \"password\", \"data-type\", \"password\", \"formControlName\", \"password\", 1, \"input\", \"form-control\"], [\"for\", \"ConfirmNewPassword\", 1, \"label\"], [\"id\", \"ConfirmNewPassword\", \"type\", \"password\", \"data-type\", \"password\", \"formControlName\", \"passwordConfirm\", 1, \"input\", \"form-control\"], [4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"btn-sm\", 3, \"click\"], [2, \"position\", \"fixed\", \"left\", \"0\", \"bottom\", \"0\", \"width\", \"100%\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"form\", 6);\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelementStart(8, \"label\", 8);\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 7);\n        i0.ɵɵelementStart(13, \"label\", 10);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 11);\n        i0.ɵɵtemplate(17, ResetPasswordComponent_div_17_Template, 2, 0, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"br\");\n        i0.ɵɵelementStart(19, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_button_click_19_listener() {\n          return ctx.resetPassword();\n        });\n        i0.ɵɵtext(20, \"Send\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"app-account-footer\", 14);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 4, \"BASE.NEW_PASSWORD\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(15, 6, \"BASE.CONFIRM_PASSWORD\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.resetPasswordForm.controls.passwordConfirm.hasError(\"required\") && ctx.resetPasswordForm.controls.passwordConfirm.hasError(\"passwordsNotMatching\"));\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i5.NgIf, i6.AccountFooterComponent],\n    pipes: [i7.TranslatePipe],\n    styles: [\"\"]\n  });\n  /**\r\n   * Confirm password validator\r\n   *\r\n   * @param {AbstractControl} control\r\n   * @returns {ValidationErrors | null}\r\n   */\n\n  return ResetPasswordComponent;\n})();\nexport const confirmPasswordValidator = control => {\n  if (!control.parent || !control) {\n    return null;\n  }\n\n  const password = control.parent.get('password');\n  const passwordConfirm = control.parent.get('passwordConfirm');\n\n  if (!password || !passwordConfirm) {\n    return null;\n  }\n\n  if (passwordConfirm.value === '') {\n    return null;\n  }\n\n  if (password.value === passwordConfirm.value) {\n    return null;\n  }\n\n  return {\n    passwordsNotMatching: true\n  };\n};","map":null,"metadata":{},"sourceType":"module"}