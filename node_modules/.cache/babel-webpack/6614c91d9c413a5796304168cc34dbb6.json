{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../config/config\";\nexport let CustomService = /*#__PURE__*/(() => {\n  class CustomService {\n    constructor(http, _appConfig) {\n      this.http = http;\n      this._appConfig = _appConfig;\n      this.serverUrl = `${this._appConfig.setting['PathAPI']}api/`;\n    } // Handle API errors\n    // tslint:disable-next-line:typedef\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.log(error);\n        console.error(`${error.error} Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    post(data, url) {\n      return this.http.post(`${this.serverUrl}${url}`, data).pipe(retry(2), catchError(this.handleError));\n    }\n\n    put(data, url) {\n      return this.http.put(`${this.serverUrl}${url}`, data).pipe(retry(2), catchError(this.handleError));\n    }\n\n    Get(url) {\n      return this.http.get(`${this.serverUrl}${url}`).pipe(catchError(this.handleError));\n    }\n\n    Delete(url) {\n      return this.http.delete(`${this.serverUrl}${url}`).pipe(retry(2), catchError(this.handleError));\n    }\n\n  }\n\n  CustomService.ɵfac = function CustomService_Factory(t) {\n    return new (t || CustomService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfig));\n  };\n\n  CustomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomService,\n    factory: CustomService.ɵfac,\n    providedIn: 'root'\n  });\n  return CustomService;\n})();","map":null,"metadata":{},"sourceType":"module"}