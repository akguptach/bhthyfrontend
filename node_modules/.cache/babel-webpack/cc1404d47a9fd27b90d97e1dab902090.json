{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { NavigationEnd } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/signalR.service\";\nimport * as i2 from \"./service/loadingAnimationService\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./layout/layout.component\";\nimport * as i6 from \"ngx-spinner\";\nimport * as i7 from \"ng-snotify\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(signalRService, document, loaderService, translateService, router, activatedRoute) {\n      /** START : Code to Track Page View using gtag.js */\n      // this.router.events.pipe(\n      //   filter(event => event instanceof NavigationEnd)\n      // ).subscribe((event: NavigationEnd) => {\n      //   console.log(event.urlAfterRedirects)\n      //   gtag('event', 'page_view', {\n      //     page_path: event.urlAfterRedirects\n      //   })\n      // })\n      this.signalRService = signalRService;\n      this.document = document;\n      this.loaderService = loaderService;\n      this.translateService = translateService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.title = 'onlineMenuFrontEnd';\n      this.loadingDataImg = false;\n      this.router.events.subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          gtag('config', 'G-14YEQELKQY', {\n            'page_path': event.urlAfterRedirects\n          });\n        }\n      });\n      /** END : Code to Track Page View  using gtag.js */\n    }\n\n    ngOnInit() {\n      // this.loaderService.loadingAnimation();\n      // const linkAddress = dir === 'ltr' ?\n      //   \"/assets/styles/bootstrap.css\"\n      //   : \"/assets/styles/bootstrap.rtl.css\";\n      // (originalLink as HTMLLinkElement).href = linkAddress;\n      // document.dir = 'rtl';\n      this.signalRService.connect();\n      this.signalRService.onUpdateProjectOffer();\n    }\n\n    ngAfterViewInit() {\n      this.checkLanguage();\n      console.log(\"ngAfterViewInit\");\n    }\n\n    checkLanguage() {\n      const attrName = 'dir-change';\n      const originalLink = document.querySelector(`[${attrName}]`);\n      const lang = localStorage.getItem('bhthyLang');\n\n      if (lang) {\n        this.document.documentElement.lang = lang;\n\n        if (lang === 'ar') {\n          this.translateService.use('ar');\n          this.changeCssFile('ar');\n          document.dir = 'rtl';\n        } else {\n          this.translateService.use('en');\n          this.changeCssFile('en');\n          document.dir = 'ltr';\n        }\n\n        this.translateService.use(lang);\n        this.changeCssFile(lang);\n      } else {\n        this.translateService.use('en');\n        this.changeCssFile('en');\n        document.dir = 'ltr';\n      }\n\n      if (lang === 'ar') {\n        document.dir = 'rtl';\n      } else {\n        document.dir = 'ltr';\n      }\n    }\n\n    changeCssFile(lang) {\n      const headTag = this.document.getElementsByTagName('head')[0];\n      const existingLink = this.document.getElementById('langCss');\n      const bundleName = lang === 'en' ? 'englishStyle.css' : 'arabicStyle.css';\n\n      if (existingLink) {\n        existingLink.href = bundleName;\n      } else {\n        const newLink = this.document.createElement('link');\n        newLink.rel = 'stylesheet';\n        newLink.type = 'text/css';\n        newLink.id = 'langCss';\n        newLink.href = bundleName;\n        headTag.appendChild(newLink);\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SignalRService), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.LoadingAnimationService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"square-jelly-box\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-layout\");\n        i0.ɵɵelementStart(1, \"ngx-spinner\", 0);\n        i0.ɵɵelementStart(2, \"p\", 1);\n        i0.ɵɵtext(3, \" Loading... ..\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"ng-snotify\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"fullScreen\", true);\n      }\n    },\n    directives: [i5.LayoutComponent, i6.NgxSpinnerComponent, i7.SnotifyComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}