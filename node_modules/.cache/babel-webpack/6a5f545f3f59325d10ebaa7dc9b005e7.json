{"ast":null,"code":"import _asyncToGenerator from \"E:/bethy/new/13-02-2023/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Signal_R from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"../config/config\";\nimport * as i3 from \"../shared/customFunctions/customFunctions\";\nexport class SignalRService {\n  constructor(authService, appConfig, customFunction) {\n    this.authService = authService;\n    this.appConfig = appConfig;\n    this.customFunction = customFunction;\n    this.serverurl = `${this.appConfig.setting.PathAPI}MessageHub`;\n  }\n\n  connect() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const options2 = {\n        accessTokenFactory: () => {\n          return _this.authService.getJwtToken();\n        }\n      };\n\n      if (SignalRService.signalRIsConnected === false) {\n        _this.signalRConnection = yield new Signal_R.HubConnectionBuilder().withUrl(_this.serverurl, options2).build(); // 2.Initialize signalRConnection\n\n        if (_this.signalRConnection) {\n          yield _this.signalRConnection.start() // tslint:disable-next-line:max-line-length\n          // When new ContectingClient Connects to the Hub we will invoke JoinChannel function on the Hub,passing to it a Name of the Client and Channel ID\n          .then(() => {\n            SignalRService.signalRIsConnected = true;\n            console.log('connected ');\n          }).catch(err => console.log('Error while starting signalRConnection: ' + err));\n\n          _this.signalRConnection.on('connecting', connecting => {\n            console.log('connecting ', connecting); // this.customFunction.showResponseMessage('connecting', 'connecting' , 'success' , 'end');\n            // tslint:disable-next-line:max-line-length\n            // this._snackBar.open( 'notificationRequest' , '×', { panelClass: ['mat-snakbar-success'] , horizontalPosition: 'end' , verticalPosition: 'top' , duration: 60000000 });\n          });\n        }\n      }\n    })();\n  }\n\n  onAddNewRequest(arrList) {\n    if (this.signalRConnection) {\n      this.signalRConnection.on('NewRequest', data => {\n        console.log('NewRequest', data); // push get Data To Array To Show The Notification In Toolbar Notification\n\n        arrList.push(data);\n        this.customFunction.showResponseMessage(data.message, data.message);\n      });\n    }\n  }\n\n  onAdviserRegister(arrList) {\n    if (this.signalRConnection) {\n      this.signalRConnection.on('NewAdviser', data => {\n        console.log('NewAdviser', data); // push get Data To Array To Show The Notification In Toolbar Notification\n\n        arrList.push(data);\n        this.customFunction.showResponseMessage(data.message, data.message);\n      });\n    }\n  }\n\n  joinToGroup(chatRoomId) {\n    if (this.signalRConnection) {\n      this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n        console.log('join to  group done');\n      }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\n    } else {\n      this.connect().then(() => {\n        this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n          console.log('join to  group done');\n        }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\n      });\n    }\n  }\n\n  typingInGroup(chatRoomId) {\n    if (this.signalRConnection) {\n      this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n        console.log('typingInGroup done');\n      }).catch(err => console.log('Error while typingInGroup to group signalRConnection: ' + err));\n    }\n  }\n\n  leaveGroup(chatRoomId) {\n    if (this.signalRConnection) {\n      this.signalRConnection.invoke('LeaveGroup', chatRoomId).then(() => {\n        console.log('LeaveGroup  group done');\n      }).catch(err => console.log('Error while leave group signalRConnection: ' + err));\n    }\n  }\n\n  sendMessage(message) {\n    if (this.signalRConnection) {\n      this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\n        console.log('SendMessageToGroup   done');\n      }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\n    } else {\n      this.connect().then(() => {\n        this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\n          console.log('SendMessageToGroup   done');\n        }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\n      });\n    }\n  }\n\n  onJoinToGroup() {\n    this.signalRConnection.on('JoinToGropeMessage', (message, userId) => {\n      console.log('JoinToGropeMessage user ', userId, 'message', message);\n\n      if (userId !== this.authService.getUserId()) {\n        // tslint:disable-next-line:max-line-length\n        // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n        return message;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  receiveMessageInGroup(messagesList) {\n    this.signalRConnection.on('ReceiveMessageInGroup', message => {\n      console.log('receiveMessageInGroup user ', message);\n\n      if (!messagesList.find(m => m.id === message.id)) {\n        messagesList.push(message);\n      }\n\n      return message;\n    });\n  }\n\n  onLeaveGroup() {\n    this.signalRConnection.on('UserLeaveGroup', (message, userId) => {\n      console.log(' UserLeaveGroup user ', message, userId);\n\n      if (userId !== this.authService.getUserId()) {\n        // tslint:disable-next-line:max-line-length\n        // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n        return message;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  onTyping() {\n    this.signalRConnection.on('TypingMessage', (message, userId) => {\n      console.log('TypingMessage user ', message, userId); // if (userId !== this.authService.getUserId()) {\n      //   return message;\n      // }\n    });\n  }\n\n  onUpdateProjectOffer() {\n    this.signalRConnection.on('UpdateProjectOffer', data => {\n      console.log('UpdateProjectOffer user ', data);\n      this.customFunction.showResponseMessage(data.message, true); // if (userId !== this.authService.getUserId()) {\n      //   return message;\n      // }\n    });\n  }\n\n  readMessage(messageId) {\n    if (this.signalRConnection) {\n      console.log(' messageId  ', messageId);\n      this.signalRConnection.invoke('IsRead', messageId).then(() => {\n        this.signalRConnection.on('IsRead', Id => {\n          console.log(' IsRead  ', Id); // this.customFunction.showResponseMessage('IsRead' , 'IsRead');\n          // tslint:disable-next-line:max-line-length\n          // this._snackBar.open( 'read meesage', '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n        });\n      }).catch(err => console.log('Error while read Message : ' + err));\n    }\n  }\n\n}\nSignalRService.signalRIsConnected = false;\n\nSignalRService.ɵfac = function SignalRService_Factory(t) {\n  return new (t || SignalRService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.AppConfig), i0.ɵɵinject(i3.CustomFunctions));\n};\n\nSignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SignalRService,\n  factory: SignalRService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:\\bethy\\new\\13-02-2023\\src\\app\\service\\signalR.service.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport * as Signal_R from '@microsoft/signalr';\r\nimport { IHttpConnectionOptions } from '@microsoft/signalr';\r\nimport { AppConfig } from '../config/config';\r\nimport { CustomFunctions } from '../shared/customFunctions/customFunctions';\r\nimport { AuthService } from './auth.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n  public static signalRIsConnected = false;\r\n  private serverurl = `${this.appConfig.setting.PathAPI}MessageHub`;\r\n  public signalRConnection!: signalR.HubConnection; // SignalR Hub Client's Connection Object\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private appConfig: AppConfig,\r\n    private customFunction: CustomFunctions\r\n  ) { }\r\n\r\n  async connect(): Promise<void> {\r\n    const options2: IHttpConnectionOptions = {\r\n      accessTokenFactory: () => {\r\n        return this.authService.getJwtToken();\r\n      }\r\n    };\r\n    if (SignalRService.signalRIsConnected === false) {\r\n      this.signalRConnection = await new Signal_R.HubConnectionBuilder()\r\n        .withUrl(this.serverurl, options2)\r\n        .build();\r\n      // 2.Initialize signalRConnection\r\n      if (this.signalRConnection) {\r\n\r\n        await this.signalRConnection\r\n          .start()\r\n          // tslint:disable-next-line:max-line-length\r\n          // When new ContectingClient Connects to the Hub we will invoke JoinChannel function on the Hub,passing to it a Name of the Client and Channel ID\r\n          .then(() => {\r\n            SignalRService.signalRIsConnected = true; console.log('connected ');\r\n          })\r\n          .catch(err => console.log('Error while starting signalRConnection: ' + err));\r\n        this.signalRConnection.on('connecting', (connecting: string) => {\r\n          console.log('connecting ', connecting);\r\n          // this.customFunction.showResponseMessage('connecting', 'connecting' , 'success' , 'end');\r\n          // tslint:disable-next-line:max-line-length\r\n          // this._snackBar.open( 'notificationRequest' , '×', { panelClass: ['mat-snakbar-success'] , horizontalPosition: 'end' , verticalPosition: 'top' , duration: 60000000 });\r\n        });\r\n\r\n\r\n      }\r\n    }\r\n  }\r\n  onAddNewRequest(arrList: Array<any>): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.on('NewRequest', (data: any) => {\r\n        console.log('NewRequest', data);\r\n        // push get Data To Array To Show The Notification In Toolbar Notification\r\n        arrList.push(data);\r\n        this.customFunction.showResponseMessage(data.message, data.message);\r\n      });\r\n    }\r\n  }\r\n  onAdviserRegister(arrList: Array<any>): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.on('NewAdviser', (data: any) => {\r\n        console.log('NewAdviser', data);\r\n        // push get Data To Array To Show The Notification In Toolbar Notification\r\n        arrList.push(data);\r\n        this.customFunction.showResponseMessage(data.message, data.message);\r\n      });\r\n    }\r\n  }\r\n  joinToGroup(chatRoomId: string): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\r\n        console.log('join to  group done');\r\n\r\n      }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\r\n    } else {\r\n      this.connect().then(() => {\r\n        this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\r\n          console.log('join to  group done');\r\n        }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\r\n      });\r\n    }\r\n  }\r\n  typingInGroup(chatRoomId: string): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\r\n        console.log('typingInGroup done');\r\n\r\n      }).catch(err => console.log('Error while typingInGroup to group signalRConnection: ' + err));\r\n    }\r\n  }\r\n  leaveGroup(chatRoomId: string): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.invoke('LeaveGroup', chatRoomId).then(() => {\r\n        console.log('LeaveGroup  group done');\r\n\r\n      }).catch(err => console.log('Error while leave group signalRConnection: ' + err));\r\n    }\r\n  }\r\n  sendMessage(message: any): void {\r\n    if (this.signalRConnection) {\r\n      this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\r\n        console.log('SendMessageToGroup   done');\r\n\r\n      }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\r\n    } else {\r\n      this.connect().then(() => {\r\n        this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\r\n          console.log('SendMessageToGroup   done');\r\n        }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\r\n      });\r\n    }\r\n  }\r\n  onJoinToGroup(): any {\r\n    this.signalRConnection.on('JoinToGropeMessage', (message: string, userId) => {\r\n      console.log('JoinToGropeMessage user ', userId, 'message', message);\r\n      if (userId !== this.authService.getUserId()) {\r\n        // tslint:disable-next-line:max-line-length\r\n        // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\r\n        return message;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n  receiveMessageInGroup(messagesList: Array<any>): any {\r\n    this.signalRConnection.on('ReceiveMessageInGroup', (message: any) => {\r\n      console.log('receiveMessageInGroup user ', message);\r\n      if (!messagesList.find(m => m.id === message.id)) {\r\n        messagesList.push(message)\r\n      }\r\n      return message;\r\n    });\r\n  }\r\n  onLeaveGroup(): any {\r\n    this.signalRConnection.on('UserLeaveGroup', (message: string, userId) => {\r\n      console.log(' UserLeaveGroup user ', message, userId);\r\n      if (userId !== this.authService.getUserId()) {\r\n        // tslint:disable-next-line:max-line-length\r\n        // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\r\n        return message;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n  onTyping(): any {\r\n    this.signalRConnection.on('TypingMessage', (message: any, userId) => {\r\n      console.log('TypingMessage user ', message, userId);\r\n      // if (userId !== this.authService.getUserId()) {\r\n      //   return message;\r\n      // }\r\n    });\r\n  }\r\n  onUpdateProjectOffer(): any {\r\n    this.signalRConnection.on('UpdateProjectOffer', (data: any) => {\r\n      console.log('UpdateProjectOffer user ', data);\r\n      this.customFunction.showResponseMessage(data.message, true);\r\n      // if (userId !== this.authService.getUserId()) {\r\n      //   return message;\r\n      // }\r\n    });\r\n  }\r\n  readMessage(messageId: number): void {\r\n    if (this.signalRConnection) {\r\n      console.log(' messageId  ', messageId);\r\n      this.signalRConnection.invoke('IsRead', messageId).then(() => {\r\n\r\n        this.signalRConnection.on('IsRead', (Id) => {\r\n          console.log(' IsRead  ', Id);\r\n          // this.customFunction.showResponseMessage('IsRead' , 'IsRead');\r\n          // tslint:disable-next-line:max-line-length\r\n          // this._snackBar.open( 'read meesage', '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\r\n        });\r\n      }).catch(err => console.log('Error while read Message : ' + err));\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}