{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, forwardRef, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nfunction StarRatingComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.labelText);\n  }\n}\n\nfunction StarRatingComponent_div_3_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-empty \", ctx_r3.classEmpty, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-half \", ctx_r4.classHalf, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-filled \", ctx_r5.classFilled, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 10);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r6.pathEmpty, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 12);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r7.pathHalf, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r8.pathFilled, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"mouseenter\", function StarRatingComponent_div_3_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onStarHover(star_r2);\n    })(\"click\", function StarRatingComponent_div_3_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onStarClicked(star_r2);\n    });\n    i0.ɵɵtemplate(1, StarRatingComponent_div_3_i_1_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(2, StarRatingComponent_div_3_i_2_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(3, StarRatingComponent_div_3_i_3_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(4, StarRatingComponent_div_3__svg_svg_4_Template, 2, 1, \"svg\", 7);\n    i0.ɵɵtemplate(5, StarRatingComponent_div_3__svg_svg_5_Template, 2, 1, \"svg\", 8);\n    i0.ɵɵtemplate(6, StarRatingComponent_div_3__svg_svg_6_Template, 2, 1, \"svg\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n  }\n}\n\nfunction StarRatingControlComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.labelText);\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-empty \", ctx_r3.classEmpty, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-half \", ctx_r4.classHalf, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-filled \", ctx_r5.classFilled, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 10);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r6.pathEmpty, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 12);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r7.pathHalf, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r8.pathFilled, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"mouseenter\", function StarRatingControlComponent_div_3_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onStarHover(star_r2);\n    })(\"click\", function StarRatingControlComponent_div_3_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onStarClicked(star_r2);\n    });\n    i0.ɵɵtemplate(1, StarRatingControlComponent_div_3_i_1_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(2, StarRatingControlComponent_div_3_i_2_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(3, StarRatingControlComponent_div_3_i_3_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(4, StarRatingControlComponent_div_3__svg_svg_4_Template, 2, 1, \"svg\", 7);\n    i0.ɵɵtemplate(5, StarRatingControlComponent_div_3__svg_svg_5_Template, 2, 1, \"svg\", 8);\n    i0.ɵɵtemplate(6, StarRatingControlComponent_div_3__svg_svg_6_Template, 2, 1, \"svg\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n  }\n}\n\nclass StarRatingConfig {}\n\nclass StarRatingUtils {\n  //Static methods\n  ///////////////////////////////////////////////////////////////////////////////////////////\n\n  /*\n   * getStarsArray\n   *\n   * returns an array of increasing numbers starting at 1\n   *\n   * @param numOfStars\n   * @returns {Array}\n   */\n  static getStarsArray(numOfStars) {\n    let stars = [];\n\n    for (let i = 0; i < numOfStars; i++) {\n      stars.push(i + 1);\n    }\n\n    return stars;\n  }\n  /*\n   * getHalfStarVisible\n   *\n   * Returns true if there should be a half star visible, and false if not.\n   *\n   * @param rating\n   * @returns {boolean}\n   */\n\n\n  static getHalfStarVisible(rating) {\n    return Math.abs(rating % 1) > 0;\n  }\n  /*\n   * getColor\n   *\n   * The default function for color calculation\n   * based on the current rating and the the number of stars possible.\n   * If a staticColor is set the function will use it as return value.\n   *\n   * @param rating\n   * @param numOfStars\n   * @param staticColor\n   * @returns {starRatingColor}\n   */\n\n\n  static getColor(rating, numOfStars, staticColor) {\n    rating = rating || 0; //if a fix color is set use this one\n\n    if (staticColor) {\n      return staticColor;\n    } //calculate size of smallest fraction\n\n\n    let fractionSize = numOfStars / 3; //apply color by fraction\n\n    let color = 'default';\n\n    if (rating > 0) {\n      color = 'negative';\n    }\n\n    if (rating > fractionSize) {\n      color = 'ok';\n    }\n\n    if (rating > fractionSize * 2) {\n      color = 'positive';\n    }\n\n    return color;\n  }\n  /*\n   * isDigitKeyEventCode\n   * detects digit key event sodes\n   * @param eventCode\n   * @returns {boolean}\n   */\n\n\n  static isDigitKeyEventCode(eventCode) {\n    return eventCode.indexOf('Digit') === 0;\n  }\n\n}\n\nclass StarRating {\n  constructor(config) {\n    this.config = config; //set default ctrl props\n\n    this.classEmpty = this.config.classEmpty;\n    this.classHalf = this.config.classHalf;\n    this.classFilled = this.config.classFilled;\n    this.pathEmpty = this.config.svgPathEmpty;\n    this.pathHalf = this.config.svgPathHalf;\n    this.pathFilled = this.config.svgPathFilled; //set default Component Inputs\n\n    if ('getColor' in this.config && typeof this.config.getColor === 'function') {\n      this.getColor = this.config.getColor;\n    }\n\n    if ('getHalfStarVisible' in this.config && typeof this.config.getHalfStarVisible === 'function') {\n      this.getHalfStarVisible = this.config.getHalfStarVisible;\n    }\n\n    this.numOfStars = this.config.numOfStars;\n    this.rating = 0;\n    this.step = 1;\n  } /////////////////////////////////////////////\n\n\n  set rating(value) {\n    this.setRating(value);\n  }\n\n  get showHalfStars() {\n    return this._showHalfStars;\n  }\n\n  set showHalfStars(value) {\n    this._showHalfStars = !!value; //update halfStarVisible\n\n    this.setHalfStarVisible();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || '';\n  }\n\n  get focus() {\n    return this._focus;\n  }\n\n  set focus(value) {\n    this._focus = !!value;\n  }\n\n  get labelText() {\n    return this._labelText;\n  }\n\n  set labelText(value) {\n    this._labelText = value;\n  }\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value || this.config.labelPosition;\n  }\n\n  get labelVisible() {\n    return this._labelVisible;\n  }\n\n  set labelVisible(value) {\n    this._labelVisible = !!value;\n  }\n\n  get hoverEnabled() {\n    return this._hoverEnabled;\n  }\n\n  set hoverEnabled(value) {\n    this._hoverEnabled = value !== undefined ? !!value : false;\n  }\n\n  get staticColor() {\n    return this._staticColor || this.config.staticColor || undefined;\n  }\n\n  set staticColor(value) {\n    this._staticColor = value; //update color.\n\n    this.setColor();\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  set direction(value) {\n    this._direction = value || undefined;\n  }\n\n  get numOfStars() {\n    return this._numOfStars;\n  }\n\n  set numOfStars(value) {\n    this._numOfStars = value > 0 ? value : this.config.numOfStars; //update stars array\n\n    this.stars = StarRatingUtils.getStarsArray(this.numOfStars); //update color\n\n    this.setColor();\n  }\n\n  get hoverRating() {\n    return this._hoverRating;\n  }\n\n  set hoverRating(value) {\n    this._hoverRating = value > 0 ? value : 0;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(value) {\n    this._speed = value || this.config.speed;\n  }\n\n  get size() {\n    return this._size || this.config.size;\n  }\n\n  set size(value) {\n    this._size = value;\n  }\n\n  get starType() {\n    return this._starType || this.config.starType;\n  }\n\n  set starType(value) {\n    this._starType = value;\n  }\n\n  get space() {\n    return this._space;\n  }\n\n  set space(value) {\n    this._space = value;\n  }\n\n  get readOnly() {\n    return this._readOnly;\n  }\n\n  set readOnly(value) {\n    this._readOnly = !!value;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = !!value;\n  }\n\n  get step() {\n    return this._step;\n  }\n\n  set step(value) {\n    this._step = value > 0 ? value : 1;\n  }\n\n  get rating() {\n    return this._rating;\n  }\n  /**\n   * setRating\n   * I use a setter function instead of a set method to enable overrides for this function.\n   * @param value\n   */\n\n\n  setRating(value) {\n    //validate and apply newRating\n    let newRating = 0;\n\n    if (value >= 0 && value <= this.numOfStars) {\n      newRating = value;\n    } //limit max value to max number of stars\n\n\n    if (value > this.numOfStars) {\n      newRating = this.numOfStars;\n    }\n\n    this._rating = newRating; //update ratingAsInteger. rating parsed to int for the value-[n] modifier\n\n    this.ratingAsInteger = parseInt(this._rating.toString(), 10); //update halfStarsVisible\n\n    this.setHalfStarVisible(); //update calculated Color\n\n    this.setColor();\n  }\n\n  svgVisible() {\n    return this.starType === 'svg';\n  }\n\n  interactionPossible() {\n    return !this.readOnly && !this.disabled;\n  }\n\n  setColor(useHoverValue = false) {\n    console.log('useHoverValue: ', useHoverValue); //check if custom function is given\n\n    const ratingValue = useHoverValue ? this.hoverRating : this.rating;\n\n    if (typeof this.getColor === 'function') {\n      this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);\n    } else {\n      this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);\n    }\n  }\n\n  setHalfStarVisible() {\n    //update halfStarVisible\n    if (this.showHalfStars) {\n      //check if custom function is given\n      if (typeof this.getHalfStarVisible === 'function') {\n        this.halfStarVisible = this.getHalfStarVisible(this.rating);\n      } else {\n        this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);\n      }\n    } else {\n      this.halfStarVisible = false;\n    }\n  }\n\n  getComponentClassNames() {\n    const classNames = [];\n    classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\n    classNames.push(this.halfStarVisible ? 'half' : '');\n    classNames.push(this.hoverEnabled ? 'hover' : '');\n    const hoverRating = this.hoverRating ? 'hover-' + this.hoverRating : 'hover-0';\n    classNames.push(this.hoverEnabled ? hoverRating : '');\n    classNames.push(this.space ? 'space-' + this.space : '');\n    classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\n    classNames.push(this.color ? 'color-' + this.color : '');\n    classNames.push(this.starType ? 'star-' + this.starType : '');\n    classNames.push(this.speed);\n    classNames.push(this.size);\n    classNames.push(this.readOnly ? 'read-only' : '');\n    classNames.push(this.disabled ? 'disabled' : '');\n    classNames.push(this.direction ? 'direction-' + this.direction : '');\n    return classNames.join(' ');\n  }\n\n  increment() {\n    //increment to next higher step\n    const absDiff = Math.abs(this.rating % this.step);\n    this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);\n  }\n\n  decrement() {\n    //decrement to next lower step\n    const absDiff = Math.abs(this.rating % this.step);\n    this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);\n  }\n\n  reset() {\n    this.rating = 0;\n  }\n\n}\n/**\n * Configuration service for the StarRating component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the star ratings used in the application.\n */\n\n\nclass StarRatingConfigService {\n  constructor() {\n    this._classEmpty = 'default-star-empty-icon';\n    this._classHalf = 'default-star-half-icon';\n    this._classFilled = 'default-star-filled-icon';\n    this._numOfStars = 5;\n    this._size = 'medium';\n    this._labelPosition = 'left';\n    this._speed = 'noticeable';\n    this._starType = 'svg';\n    this._assetsPath = 'assets/images/';\n    this._svgPath = this.assetsPath + 'star-rating.icons.svg';\n    this._svgEmptySymbolId = 'star-empty';\n    this._svgHalfSymbolId = 'star-half';\n    this._svgFilledSymbolId = 'star-filled';\n    this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;\n    this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;\n    this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;\n  }\n\n  get classEmpty() {\n    return this._classEmpty;\n  }\n\n  set classEmpty(classEmpty) {\n    this._classEmpty = classEmpty;\n  }\n\n  get classHalf() {\n    return this._classHalf;\n  }\n\n  set classHalf(classHalf) {\n    this._classHalf = classHalf;\n  }\n\n  get classFilled() {\n    return this._classFilled;\n  }\n\n  set classFilled(classFilled) {\n    this._classFilled = classFilled;\n  }\n\n  get numOfStars() {\n    return this._numOfStars;\n  }\n\n  set numOfStars(numOfStars) {\n    this._numOfStars = numOfStars;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    this._size = size;\n  }\n\n  get staticColor() {\n    return this._staticColor;\n  }\n\n  set staticColor(value) {\n    this._staticColor = value;\n  }\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(labelPosition) {\n    this._labelPosition = labelPosition;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(speed) {\n    this._speed = speed;\n  }\n\n  get starType() {\n    return this._starType;\n  }\n\n  set starType(starType) {\n    this._starType = starType;\n  }\n\n  get assetsPath() {\n    return this._assetsPath;\n  }\n\n  set assetsPath(assetsPath) {\n    this._assetsPath = assetsPath;\n  }\n\n  get svgPath() {\n    return this._svgPath;\n  }\n\n  set svgPath(svgPath) {\n    this._svgPath = svgPath;\n  }\n\n  get svgEmptySymbolId() {\n    return this._svgEmptySymbolId;\n  }\n\n  set svgEmptySymbolId(svgEmptySymbolId) {\n    this._svgEmptySymbolId = svgEmptySymbolId;\n  }\n\n  get svgHalfSymbolId() {\n    return this._svgHalfSymbolId;\n  }\n\n  set svgHalfSymbolId(svgHalfSymbolId) {\n    this._svgHalfSymbolId = svgHalfSymbolId;\n  }\n\n  get svgFilledSymbolId() {\n    return this._svgFilledSymbolId;\n  }\n\n  set svgFilledSymbolId(svgFilledSymbolId) {\n    this._svgFilledSymbolId = svgFilledSymbolId;\n  }\n\n  get svgPathEmpty() {\n    return this._svgPathEmpty;\n  }\n\n  set svgPathEmpty(svgPathEmpty) {\n    this._svgPathEmpty = svgPathEmpty;\n  }\n\n  get svgPathHalf() {\n    return this._svgPathHalf;\n  }\n\n  set svgPathHalf(svgPathHalf) {\n    this._svgPathHalf = svgPathHalf;\n  }\n\n  get svgPathFilled() {\n    return this._svgPathFilled;\n  }\n\n  set svgPathFilled(svgPathFilled) {\n    this._svgPathFilled = svgPathFilled;\n  }\n\n  getColor(rating, numOfStars, staticColor) {\n    rating = rating || 0; // if a fix color is set use this one\n\n    if (staticColor) {\n      return staticColor;\n    } // calculate size of smallest fraction\n\n\n    const fractionSize = numOfStars / 3; // apply color by fraction\n\n    let color = 'default';\n\n    if (rating > 0) {\n      color = 'negative';\n    }\n\n    if (rating > fractionSize) {\n      color = 'ok';\n    }\n\n    if (rating > fractionSize * 2) {\n      color = 'positive';\n    }\n\n    return color;\n  }\n\n  getHalfStarVisible(rating) {\n    return Math.abs(rating % 1) > 0;\n  }\n\n}\n\nlet StarRatingComponent = /*#__PURE__*/(() => {\n  class StarRatingComponent extends StarRating {\n    constructor(config) {\n      super(config); //Outputs\n      ///////////////////////////////////////////////////////////////////////////////////////////\n\n      this.starClickChange = new EventEmitter();\n      this.ratingChange = new EventEmitter();\n      this.hoverRatingChange = new EventEmitter();\n    }\n\n    saveOnClick($event) {\n      if (this.starClickChange) {\n        this.starClickChange.emit($event);\n      }\n    }\n\n    saveOnRatingChange($event) {\n      if (this.ratingChange) {\n        this.ratingChange.emit($event);\n      }\n    }\n\n    saveOnHover($event) {\n      if (this.hoverRatingChange) {\n        this.hoverRatingChange.emit($event);\n      }\n    }\n    /**ACCESSIBILITY **/\n    //Keyboard events\n\n\n    onKeyDown(event) {\n      if (!this.interactionPossible()) {\n        return;\n      }\n\n      const handlers = {\n        //Decrement\n        Minus: () => this.decrement(),\n        ArrowDown: () => this.decrement(),\n        ArrowLeft: () => this.decrement(),\n        //Increment\n        Plus: () => this.increment(),\n        ArrowRight: () => this.increment(),\n        ArrowUp: () => this.increment(),\n        //Reset\n        Backspace: () => this.reset(),\n        Delete: () => this.reset(),\n        Digit0: () => this.reset()\n      };\n\n      const handleDigits = eventCode => {\n        const dStr = 'Digit';\n        const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n        this.rating = digit;\n      };\n\n      if (handlers[event['code']] || StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n        if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n          handleDigits(event['code']);\n        } else {\n          handlers[event['code']]();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    } //Hover events\n\n\n    onStarHover(rating) {\n      if (!this.interactionPossible() || !this.hoverEnabled) {\n        return;\n      }\n\n      this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0; //update calculated Color\n\n      this.setColor(true); //fire onHoverRatingChange event\n\n      const $event = {\n        hoverRating: this.hoverRating\n      };\n      this.saveOnHover($event);\n    }\n\n    onStopHover() {\n      if (!this.interactionPossible() || !this.hoverEnabled) {\n        return;\n      }\n\n      this.hoverRating = 0; //update calculated Color\n\n      this.setColor();\n    } //Overrides\n\n\n    setRating(value) {\n      const initValue = this.rating;\n      super.setRating(value); //if value changed trigger valueAccessor events and outputs\n\n      if (initValue !== this.rating) {\n        const $event = {\n          rating: this.rating\n        };\n        this.saveOnRatingChange($event);\n      }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param rating\n     */\n\n\n    onStarClicked(rating) {\n      //fire onClick event\n      if (!this.interactionPossible()) {\n        return;\n      }\n\n      this.rating = rating;\n      const onClickEventObject = {\n        rating: this.rating\n      };\n      this.saveOnClick(onClickEventObject);\n    }\n\n  }\n\n  StarRatingComponent.ɵfac = function StarRatingComponent_Factory(t) {\n    return new (t || StarRatingComponent)(i0.ɵɵdirectiveInject(StarRatingConfigService));\n  };\n\n  StarRatingComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StarRatingComponent,\n    selectors: [[\"star-rating\"]],\n    inputs: {\n      getHalfStarVisible: \"getHalfStarVisible\",\n      getColor: \"getColor\",\n      showHalfStars: \"showHalfStars\",\n      hoverEnabled: \"hoverEnabled\",\n      rating: \"rating\",\n      step: \"step\",\n      disabled: \"disabled\",\n      readOnly: \"readOnly\",\n      space: \"space\",\n      starType: \"starType\",\n      size: \"size\",\n      speed: \"speed\",\n      numOfStars: \"numOfStars\",\n      direction: \"direction\",\n      staticColor: \"staticColor\",\n      labelPosition: \"labelPosition\",\n      labelText: \"labelText\",\n      id: \"id\"\n    },\n    outputs: {\n      starClickChange: \"starClickChange\",\n      ratingChange: \"ratingChange\",\n      hoverRatingChange: \"hoverRatingChange\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 6,\n    consts: [[\"tabindex\", \"0\", 3, \"id\", \"keydown\", \"mouseleave\"], [\"class\", \"label-value\", 4, \"ngIf\"], [1, \"star-container\"], [\"class\", \"star\", 3, \"mouseenter\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"label-value\"], [1, \"star\", 3, \"mouseenter\", \"click\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"star-empty\", 4, \"ngIf\"], [\"class\", \"star-half\", 4, \"ngIf\"], [\"class\", \"star-filled\", 4, \"ngIf\"], [1, \"star-empty\"], [0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\"], [1, \"star-half\"], [1, \"star-filled\"]],\n    template: function StarRatingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"keydown\", function StarRatingComponent_Template_div_keydown_0_listener($event) {\n          return ctx.onKeyDown($event);\n        })(\"mouseleave\", function StarRatingComponent_Template_div_mouseleave_0_listener() {\n          return ctx.onStopHover();\n        });\n        i0.ɵɵtemplate(1, StarRatingComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, StarRatingComponent_div_3_Template, 7, 6, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"rating \", ctx.getComponentClassNames(), \"\");\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.labelText);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.stars);\n      }\n    },\n    directives: [i2.NgIf, i2.NgForOf],\n    encapsulation: 2\n  });\n  return StarRatingComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst STAR_RATING_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => StarRatingControlComponent),\n  multi: true\n};\nlet StarRatingControlComponent = /*#__PURE__*/(() => {\n  class StarRatingControlComponent extends StarRating {\n    constructor(config) {\n      super(config); //Outputs\n      ///////////////////////////////////////////////////////////////////////////////////////////\n\n      this.starClickChange = new EventEmitter();\n      this.ratingChange = new EventEmitter();\n      this.hoverRatingChange = new EventEmitter();\n      this.onModelChangeRegistered = false;\n      this.onTouchRegistered = false;\n    }\n\n    saveOnClick($event) {\n      if (this.starClickChange) {\n        this.starClickChange.emit($event);\n      }\n    }\n\n    saveOnRatingChange($event) {\n      if (this.ratingChange) {\n        this.ratingChange.emit($event);\n      }\n    }\n\n    saveOnHover($event) {\n      if (this.hoverRatingChange) {\n        this.hoverRatingChange.emit($event);\n      }\n    }\n\n    saveOnTouch() {\n      if (this.onTouchRegistered) {\n        this.onTouch();\n      }\n    }\n\n    saveOnModelChange(value) {\n      if (this.onModelChangeRegistered) {\n        this.onModelChange(value);\n      }\n    }\n    /**ACCESSIBILITY **/\n    //Keyboard events\n\n\n    onKeyDown(event) {\n      if (!this.interactionPossible()) {\n        return;\n      }\n\n      const handlers = {\n        //Decrement\n        Minus: () => this.decrement(),\n        ArrowDown: () => this.decrement(),\n        ArrowLeft: () => this.decrement(),\n        //Increment\n        Plus: () => this.increment(),\n        ArrowRight: () => this.increment(),\n        ArrowUp: () => this.increment(),\n        //Reset\n        Backspace: () => this.reset(),\n        Delete: () => this.reset(),\n        Digit0: () => this.reset()\n      };\n\n      const handleDigits = eventCode => {\n        const dStr = 'Digit';\n        const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n        this.rating = digit;\n      };\n\n      if (handlers[event['code']] || StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n        if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n          handleDigits(event['code']);\n        } else {\n          handlers[event['code']]();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.saveOnTouch();\n    } //Focus events\n\n\n    onBlur(event) {\n      this.focus = false;\n      event.preventDefault();\n      event.stopPropagation();\n      this.saveOnTouch();\n    }\n\n    onFocus(event) {\n      this.focus = true;\n      event.preventDefault();\n      event.stopPropagation();\n      this.saveOnTouch();\n    } //Hover events\n\n\n    onStarHover(rating) {\n      if (!this.interactionPossible() || !this.hoverEnabled) {\n        return;\n      }\n\n      this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0; //fire onHoverRatingChange event\n\n      const $event = {\n        hoverRating: this.hoverRating\n      };\n      this.saveOnHover($event);\n    }\n    /**Form Control - ControlValueAccessor implementation**/\n\n\n    writeValue(obj) {\n      this.rating = obj;\n    }\n\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n      this.onModelChangeRegistered = true;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouch = fn;\n      this.onTouchRegistered = true;\n    } //Overrides\n\n\n    setRating(value) {\n      const initValue = this.rating;\n      super.setRating(value); //if value changed trigger valueAccessor events and outputs\n\n      if (initValue !== this.rating) {\n        const $event = {\n          rating: this.rating\n        };\n        this.saveOnRatingChange($event);\n        this.saveOnModelChange(this.rating);\n      }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param rating\n     */\n\n\n    onStarClicked(rating) {\n      //fire onClick event\n      if (!this.interactionPossible()) {\n        return;\n      }\n\n      this.rating = rating;\n      const onClickEventObject = {\n        rating: this.rating\n      };\n      this.saveOnClick(onClickEventObject);\n    }\n\n  }\n\n  StarRatingControlComponent.ɵfac = function StarRatingControlComponent_Factory(t) {\n    return new (t || StarRatingControlComponent)(i0.ɵɵdirectiveInject(StarRatingConfigService));\n  };\n\n  StarRatingControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StarRatingControlComponent,\n    selectors: [[\"star-rating-control\"]],\n    inputs: {\n      getHalfStarVisible: \"getHalfStarVisible\",\n      getColor: \"getColor\",\n      showHalfStars: \"showHalfStars\",\n      hoverEnabled: \"hoverEnabled\",\n      rating: \"rating\",\n      step: \"step\",\n      disabled: \"disabled\",\n      readOnly: \"readOnly\",\n      space: \"space\",\n      starType: \"starType\",\n      size: \"size\",\n      speed: \"speed\",\n      numOfStars: \"numOfStars\",\n      direction: \"direction\",\n      staticColor: \"staticColor\",\n      labelPosition: \"labelPosition\",\n      labelText: \"labelText\",\n      id: \"id\"\n    },\n    outputs: {\n      starClickChange: \"starClickChange\",\n      ratingChange: \"ratingChange\",\n      hoverRatingChange: \"hoverRatingChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([STAR_RATING_CONTROL_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 6,\n    consts: [[\"tabindex\", \"0\", 3, \"id\", \"keydown\", \"blur\", \"focus\", \"mouseleave\"], [\"class\", \"label-value\", 4, \"ngIf\"], [1, \"star-container\"], [\"class\", \"star\", 3, \"mouseenter\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"label-value\"], [1, \"star\", 3, \"mouseenter\", \"click\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"star-empty\", 4, \"ngIf\"], [\"class\", \"star-half\", 4, \"ngIf\"], [\"class\", \"star-filled\", 4, \"ngIf\"], [1, \"star-empty\"], [0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\"], [1, \"star-half\"], [1, \"star-filled\"]],\n    template: function StarRatingControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"keydown\", function StarRatingControlComponent_Template_div_keydown_0_listener($event) {\n          return ctx.onKeyDown($event);\n        })(\"blur\", function StarRatingControlComponent_Template_div_blur_0_listener($event) {\n          return ctx.onBlur($event);\n        })(\"focus\", function StarRatingControlComponent_Template_div_focus_0_listener($event) {\n          return ctx.onFocus($event);\n        })(\"mouseleave\", function StarRatingControlComponent_Template_div_mouseleave_0_listener() {\n          return ctx.onStarHover(0);\n        });\n        i0.ɵɵtemplate(1, StarRatingControlComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, StarRatingControlComponent_div_3_Template, 7, 6, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"rating \", ctx.getComponentClassNames(), \"\");\n        i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.labelText);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.stars);\n      }\n    },\n    directives: [i2.NgIf, i2.NgForOf],\n    encapsulation: 2\n  });\n  return StarRatingControlComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DECLARATIONS = [StarRatingComponent, StarRatingControlComponent];\nconst EXPORTS = [DECLARATIONS];\nlet StarRatingModule = /*#__PURE__*/(() => {\n  class StarRatingModule {\n    static forRoot() {\n      return {\n        ngModule: StarRatingModule,\n        providers: [StarRatingConfigService]\n      };\n    }\n\n    static forChild() {\n      return {\n        ngModule: StarRatingModule,\n        providers: []\n      };\n    }\n\n  }\n\n  StarRatingModule.ɵfac = function StarRatingModule_Factory(t) {\n    return new (t || StarRatingModule)();\n  };\n\n  StarRatingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StarRatingModule\n  });\n  StarRatingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return StarRatingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { StarRating, StarRatingComponent, StarRatingConfig, StarRatingConfigService, StarRatingControlComponent, StarRatingModule, StarRatingUtils }; //# sourceMappingURL=angular-star-rating.mjs.map","map":null,"metadata":{},"sourceType":"module"}