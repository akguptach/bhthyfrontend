{"ast":null,"code":"import _asyncToGenerator from \"E:/bethy/new/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __rest } from \"tslib\";\nimport Swal from 'sweetalert2';\nimport { Subject } from 'rxjs';\nimport { SnotifyPosition } from 'ng-snotify';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-snotify\";\nexport let CustomFunctions = /*#__PURE__*/(() => {\n  class CustomFunctions {\n    constructor(translate, router, snotify) {\n      this.translate = translate;\n      this.router = router;\n      this.snotify = snotify; // tslint:disable-next-line:variable-name\n\n      this._onDestroy = new Subject();\n      this.style = 'material';\n      this.title = 'Snotify title!';\n      this.body = 'Lorem ipsum dolor sit amet!';\n      this.timeout = 3000;\n      this.position = SnotifyPosition.centerTop;\n      this.progressBar = true;\n      this.closeClick = true;\n      this.newTop = true;\n      this.filterDuplicates = false;\n      this.backdrop = -1;\n      this.dockMax = 8;\n      this.blockMax = 6;\n      this.pauseHover = true;\n      this.titleMaxLength = 15;\n      this.bodyMaxLength = 80;\n    }\n\n    IsRTL() {\n      if (this.translate.currentLang === 'ar') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    formatDate(date) {\n      if (date) {\n        const d = new Date(date);\n        let month = '' + (d.getMonth() + 1);\n        let day = '' + d.getDate();\n        const year = d.getFullYear();\n\n        if (month.length < 2) {\n          month = '0' + month;\n        }\n\n        if (day.length < 2) {\n          day = '0' + day;\n        }\n\n        return [year, month, day].join('-');\n      } else {\n        return null;\n      }\n    }\n\n    translateText(TextAr, textEn) {\n      if (this.translate.currentLang === 'ar') {\n        return TextAr;\n      } else {\n        return textEn;\n      }\n    }\n\n    customConfirm(title, callback) {\n      Swal.fire({\n        title,\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: ' Confirm Process',\n        cancelButtonText: 'back'\n      }).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          if (result.value) {\n            callback();\n          } else if (result.dismiss === Swal.DismissReason.cancel) {\n            Swal.fire('Cancelled', '   Back Done ', 'error');\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    getConfig() {\n      this.snotify.setDefaults({\n        global: {\n          newOnTop: this.newTop,\n          maxAtPosition: this.blockMax,\n          maxOnScreen: this.dockMax,\n          // @ts-ignore\n          filterDuplicates: this.filterDuplicates\n        }\n      });\n      return {\n        bodyMaxLength: this.bodyMaxLength,\n        titleMaxLength: this.titleMaxLength,\n        backdrop: this.backdrop,\n        position: this.position,\n        timeout: this.timeout,\n        showProgressBar: this.progressBar,\n        closeOnClick: this.closeClick,\n        pauseOnHover: this.pauseHover\n      };\n    }\n\n    onSuccess() {\n      this.snotify.success(this.body, this.title, this.getConfig());\n    }\n\n    onInfo() {\n      this.snotify.info(this.body, this.title, this.getConfig());\n    }\n\n    onError() {\n      this.snotify.error(this.body, this.title, this.getConfig());\n    }\n\n    onWarning() {\n      this.snotify.warning(this.body, this.title, this.getConfig());\n    }\n\n    showResponseMessage(msg, status = null) {\n      let Title = 'Success';\n      let TitleError = 'Error';\n\n      if (status > 300 || status === false) {\n        this.snotify.error(msg, TitleError, this.getConfig());\n      } else if (status === 'warning' || status === 'warn') {\n        this.snotify.warning(msg, TitleError, this.getConfig());\n      } else if (status === 'info') {\n        this.snotify.info(msg, Title, this.getConfig());\n      } else {\n        this.snotify.success(msg, Title, this.getConfig());\n\n        const _a = this.getConfig(),\n              {\n          timeout\n        } = _a,\n              config = __rest(_a, [\"timeout\"]); // Omit timeout\n        // this.snotify.async(msg, successAction, config);\n\n      }\n    }\n\n    reloadComponent() {\n      const currentUrl = this.router.url;\n\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([currentUrl]);\n    }\n\n    formatDate2(date) {\n      const d = new Date(date);\n      let month = '' + (d.getMonth() + 1);\n      let day = '' + d.getDate();\n      const year = d.getFullYear();\n\n      if (month.length < 2) {\n        month = '0' + month;\n      }\n\n      if (day.length < 2) {\n        day = '0' + day;\n      }\n\n      return [year, month, day].join('-');\n    }\n\n  }\n\n  CustomFunctions.ɵfac = function CustomFunctions_Factory(t) {\n    return new (t || CustomFunctions)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SnotifyService));\n  };\n\n  CustomFunctions.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomFunctions,\n    factory: CustomFunctions.ɵfac,\n    providedIn: 'root'\n  });\n  return CustomFunctions;\n})();","map":null,"metadata":{},"sourceType":"module"}