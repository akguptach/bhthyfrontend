import { Component, Input } from '@angular/core';
export class NgxRatingStarsComponent {
    constructor() {
        this.showRatingInNumericFormat = false;
        this.yellowStar = "/assets/images/" + "yellow-star.jpg";
        this.midStar = "/assets/images/" + "mid-star.jpg";
        this.greyStar = "/assets/images/" + "grey-star.jpg";
        this.ratingArray = new Array;
    }
    ngOnInit() {
        this.buildRatingsStars();
    }
    // builds the array that shows the stars
    buildRatingsStars() {
        let ratingArray = new Array;
        if (this.rating.value == 0) {
            for (let k = 0; k <= 4; k++) {
                ratingArray[k] = this.greyStar;
            }
            this.ratingArray = ratingArray;
        }
        else {
            let rating = this.rating.value;
            let trunc = Math.trunc(rating);
            for (let j = 0; j < trunc + 1; j++) {
                if (rating > j && rating < j + 1) {
                    ratingArray[j] = this.midStar;
                }
                else {
                    if (j != trunc) {
                        ratingArray[j] = this.yellowStar;
                    }
                }
            }
            if (rating == Math.floor(rating)) {
                for (let k = trunc; k <= 4; k++) {
                    ratingArray[k] = this.greyStar;
                }
            }
            else {
                for (let k = trunc + 1; k <= 4; k++) {
                    ratingArray[k] = this.greyStar;
                }
            }
            this.ratingArray = ratingArray;
        }
    }
}
NgxRatingStarsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-rating-stars',
                template: `
        <div class="rating-star" *ngFor="let star of ratingArray"><img [ngStyle]="style.starsStyle" src="{{star}}"></div>
        <div class="rating-values" [ngStyle]="style.ratingStyle"></div>
        <p *ngIf="showRatingInNumericFormat">{{rating?.value | number:'1.1-1'}}</p> 
        <p [ngStyle]="style.countStyle">({{rating?.count}})</p>
    `,
                styles: ["img{height:auto;width:27px}.rating-star,.rating-values,p{display:inline}"]
            },] }
];
NgxRatingStarsComponent.propDecorators = {
    rating: [{ type: Input }],
    style: [{ type: Input }],
    showRatingInNumericFormat: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJhdGluZy1zdGFycy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvYW5kcmVhL2xhdm9yby9hbmd1bGFyL2xpYnJlcmllL1JhdGluZ1N0YXJzTGlicmFyeS9wcm9qZWN0cy9uZ3gtcmF0aW5nLXN0YXJzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtcmF0aW5nLXN0YXJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVl6RCxNQUFNLE9BQU8sdUJBQXVCO0lBVnBDO1FBY2EsOEJBQXlCLEdBQVcsS0FBSyxDQUFBO1FBRWxELGVBQVUsR0FBVSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQTtRQUN6RCxZQUFPLEdBQVUsaUJBQWlCLEdBQUcsY0FBYyxDQUFBO1FBQ25ELGFBQVEsR0FBVSxpQkFBaUIsR0FBRyxlQUFlLENBQUE7UUFFckQsZ0JBQVcsR0FBWSxJQUFJLEtBQUssQ0FBQztJQXNEckMsQ0FBQztJQXBERyxRQUFRO1FBRUosSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFFNUIsQ0FBQztJQUVELHdDQUF3QztJQUN4QyxpQkFBaUI7UUFDYixJQUFJLFdBQVcsR0FBWSxJQUFJLEtBQUssQ0FBQztRQUVyQyxJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBQztZQUV0QixLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDO2dCQUNqQixXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNsQztZQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1NBRWpDO2FBQUk7WUFFRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtZQUU5QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRS9CLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDO2dCQUV0QixJQUFHLE1BQU0sR0FBQyxDQUFDLElBQUksTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLEVBQUM7b0JBQ3RCLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNqQztxQkFBSztvQkFDRixJQUFHLENBQUMsSUFBRSxLQUFLLEVBQUM7d0JBQ1IsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7cUJBQ3BDO2lCQUNKO2FBRUo7WUFFRCxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDO2dCQUM3QixLQUFJLElBQUksQ0FBQyxHQUFDLEtBQUssRUFBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDO29CQUN6QixXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQkFDOUI7YUFDSjtpQkFBTTtnQkFDSCxLQUFJLElBQUksQ0FBQyxHQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQztvQkFDM0IsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQzlCO2FBQ0o7WUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtTQUVqQztJQUVMLENBQUM7OztZQXhFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7OztLQUtUOzthQUVKOzs7cUJBR0ksS0FBSztvQkFDTCxLQUFLO3dDQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtcmF0aW5nLXN0YXJzJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwicmF0aW5nLXN0YXJcIiAqbmdGb3I9XCJsZXQgc3RhciBvZiByYXRpbmdBcnJheVwiPjxpbWcgW25nU3R5bGVdPVwic3R5bGUuc3RhcnNTdHlsZVwiIHNyYz1cInt7c3Rhcn19XCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyYXRpbmctdmFsdWVzXCIgW25nU3R5bGVdPVwic3R5bGUucmF0aW5nU3R5bGVcIj48L2Rpdj5cbiAgICAgICAgPHAgKm5nSWY9XCJzaG93UmF0aW5nSW5OdW1lcmljRm9ybWF0XCI+e3tyYXRpbmc/LnZhbHVlIHwgbnVtYmVyOicxLjEtMSd9fTwvcD4gXG4gICAgICAgIDxwIFtuZ1N0eWxlXT1cInN0eWxlLmNvdW50U3R5bGVcIj4oe3tyYXRpbmc/LmNvdW50fX0pPC9wPlxuICAgIGAsXG4gICAgc3R5bGVVcmxzOiBbJ25neC1yYXRpbmctc3RhcnMuY29tcG9uZW50LmNzcycgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hSYXRpbmdTdGFyc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBASW5wdXQoKSByYXRpbmc6YW55XG4gICAgQElucHV0KCkgc3R5bGU6YW55XG4gICAgQElucHV0KCkgc2hvd1JhdGluZ0luTnVtZXJpY0Zvcm1hdDpib29sZWFuID0gZmFsc2VcblxuICAgIHllbGxvd1N0YXI6c3RyaW5nID0gXCIvYXNzZXRzL2ltYWdlcy9cIiArIFwieWVsbG93LXN0YXIuanBnXCJcbiAgICBtaWRTdGFyOnN0cmluZyA9IFwiL2Fzc2V0cy9pbWFnZXMvXCIgKyBcIm1pZC1zdGFyLmpwZ1wiXG4gICAgZ3JleVN0YXI6c3RyaW5nID0gXCIvYXNzZXRzL2ltYWdlcy9cIiArIFwiZ3JleS1zdGFyLmpwZ1wiXG5cbiAgICByYXRpbmdBcnJheTpzdHJpbmdbXSA9IG5ldyBBcnJheTtcblxuICAgIG5nT25Jbml0KCk6dm9pZHtcblxuICAgICAgICB0aGlzLmJ1aWxkUmF0aW5nc1N0YXJzKClcblxuICAgIH1cblxuICAgIC8vIGJ1aWxkcyB0aGUgYXJyYXkgdGhhdCBzaG93cyB0aGUgc3RhcnNcbiAgICBidWlsZFJhdGluZ3NTdGFycygpOnZvaWR7XG4gICAgICAgIGxldCByYXRpbmdBcnJheTpzdHJpbmdbXSA9IG5ldyBBcnJheTtcblxuICAgICAgICBpZih0aGlzLnJhdGluZy52YWx1ZSA9PSAwKXtcblxuICAgICAgICAgICAgZm9yKGxldCBrPTA7azw9NDtrKyspe1xuICAgICAgICAgICAgICAgIHJhdGluZ0FycmF5W2tdID0gdGhpcy5ncmV5U3RhcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yYXRpbmdBcnJheSA9IHJhdGluZ0FycmF5XG5cbiAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgIGxldCByYXRpbmcgPSB0aGlzLnJhdGluZy52YWx1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgdHJ1bmMgPSBNYXRoLnRydW5jKHJhdGluZyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGxldCBqPTA7ajx0cnVuYysxO2orKyl7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHJhdGluZz5qICYmIHJhdGluZzxqKzEpe1xuICAgICAgICAgICAgICAgICAgICByYXRpbmdBcnJheVtqXSA9IHRoaXMubWlkU3RhcjtcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGohPXRydW5jKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZ0FycmF5W2pdID0gdGhpcy55ZWxsb3dTdGFyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHJhdGluZyA9PSBNYXRoLmZsb29yKHJhdGluZykpe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaz10cnVuYztrPD00O2srKyl7XG4gICAgICAgICAgICAgICAgcmF0aW5nQXJyYXlba10gPSB0aGlzLmdyZXlTdGFyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBrPXRydW5jKzE7azw9NDtrKyspe1xuICAgICAgICAgICAgICAgIHJhdGluZ0FycmF5W2tdID0gdGhpcy5ncmV5U3RhcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmF0aW5nQXJyYXkgPSByYXRpbmdBcnJheVxuXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuIl19