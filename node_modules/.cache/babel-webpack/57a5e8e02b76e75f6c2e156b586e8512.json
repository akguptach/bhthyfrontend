{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../config/config\";\n\nclass Permission {}\n\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, _appConfig) {\n      this.http = http;\n      this.router = router;\n      this._appConfig = _appConfig;\n      this.serverurl = `${this._appConfig.setting['PathAPI']}api/Identity/`;\n      this.serverUrl = `${this._appConfig.setting['PathAPI']}api/`;\n      this.JWT_USER = 'Bhthy_USERNAME';\n      this.REFERSH_ROKEN = 'Bhthy_REFERSH_TOKEN';\n      this.JWT_TOKEN = 'Bhthy_JWT_TOKEN';\n      this.JWT_ROLES = 'Bhthy_JWT_ROLES';\n      this.JWT_PERMISSION = 'Bhthy_JWT_PERMISSION'; // this.getUserPermissions();\n    } // Handle API errors\n    // tslint:disable-next-line:typedef\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    } // tslint:disable-next-line:ban-types\n\n\n    registerUser(user) {\n      const headers = new HttpHeaders().set('content-type', 'application/json').set('Access-Control-Allow-Origin', '*');\n      return this.http.post(`${this.serverurl}Login`, user, {\n        headers\n      }).pipe(retry(2), catchError(this.handleError));\n    }\n\n    loginUser(user, routeAction) {\n      const headers = new HttpHeaders().set('content-type', 'application/json').set('Access-Control-Allow-Origin', '*');\n      return this.http.post(`${this.serverurl}${routeAction}`, user).pipe(tap(response => {\n        if (response.status === true) {\n          this.doLoggIn(response);\n          console.log(response);\n        }\n      }), retry(2), catchError(this.handleError));\n    } // tslint:disable-next-line:typedef\n\n\n    refershToken() {// return this.http.post(`${this.serverurl}refersh` , {refershToken: this.getRefershToken()} ).pipe(\n      //   tap( (token) => {this.storJwtTOken(token); } ) ,\n      //   mapTo(true) ,\n      //  retry(2),\n      //  catchError(this.handleError)\n      // );\n    }\n\n    changePassword(userInfo) {\n      const headers = new HttpHeaders();\n      this.loadToken();\n      headers.append('Authorization', `${this.token}`);\n      headers.set('content-type', 'application/json');\n      headers.set('Access-Control-Allow-Origin', '*');\n      return this.http.put(`${this.serverurl}changePassword`, userInfo, {\n        headers\n      }).pipe(retry(2), catchError(this.handleError));\n    } // tslint:disable-next-line:typedef\n\n\n    storeUserData(token) {\n      localStorage.setItem(this.JWT_TOKEN, token);\n      localStorage.setItem(this.REFERSH_ROKEN, token);\n      const roles = [];\n      this.token = token;\n    }\n\n    setToken(token) {\n      localStorage.setItem(this.JWT_TOKEN, token);\n      localStorage.setItem(this.REFERSH_ROKEN, token);\n      this.token = token;\n    }\n\n    storJwtTOken(jwt) {\n      localStorage.setItem(this.JWT_TOKEN, jwt);\n    }\n\n    roleMatch(allowedRole) {\n      let isMatch = false;\n\n      if (this.isLoggedIn()) {\n        const payLoad = JSON.parse(window.atob(localStorage.getItem(this.JWT_TOKEN).split('.')[1]));\n        const userRole = payLoad.userRole; // console.log('user role', userRole);\n        // allowedRole.forEach(element => {\n\n        if (userRole.trim() === allowedRole) {\n          isMatch = true; // return false;\n        }\n      }\n\n      return isMatch;\n    }\n\n    hasAnyRoles(allowedRoles) {\n      let isMatch = false;\n\n      if (this.isLoggedIn()) {\n        const payLoad = JSON.parse(window.atob(localStorage.getItem(this.JWT_TOKEN).split('.')[1]));\n        const userRole = payLoad.userRole; // tslint:disable-next-line:prefer-for-of\n        // for (let index = 0; index < userRole.length; index++) {\n\n        if (allowedRoles.indexOf(userRole) > -1) {\n          isMatch = true;\n        } // }\n\n      }\n\n      return isMatch;\n    }\n\n    hasRole(allowedRoles) {\n      let isMatch = false;\n\n      if (this.isLoggedIn()) {\n        const payLoad = JSON.parse(window.atob(localStorage.getItem(this.JWT_TOKEN).split('.')[1]));\n        const userRole = payLoad.userRole; // console.log('userRole ', userRole);\n        // tslint:disable-next-line:prefer-for-of\n\n        if (allowedRoles === userRole) {\n          isMatch = true;\n        }\n      }\n\n      return isMatch;\n    }\n\n    loadToken() {\n      const authtoken = localStorage.getItem(this.JWT_TOKEN);\n      this.token = authtoken;\n    }\n\n    doLoggIn(res) {\n      this.storeUserData(res.token);\n    }\n\n    logout() {\n      this.clearToken();\n      this.router.navigate(['/#']); // return this.http.post(`${this.serverurl}logout` , {refershToken: this.getRefershToken()} ).pipe(\n      //   tap( () => { this.doLogout(); } ) ,\n      //   mapTo(true) ,\n      //  retry(2),\n      //  catchError(this.handleError)\n      // );\n    }\n\n    isLoggedIn() {\n      return !!this.getJwtToken();\n    }\n\n    clearToken() {\n      localStorage.removeItem(this.JWT_TOKEN);\n      localStorage.removeItem(this.REFERSH_ROKEN);\n      localStorage.removeItem(this.JWT_ROLES);\n      localStorage.removeItem(this.JWT_PERMISSION);\n      localStorage.removeItem(this.JWT_USER);\n      localStorage.removeItem('user_info');\n    }\n\n    getRefershToken() {\n      return localStorage.getItem('');\n    }\n\n    getJwtToken() {\n      return localStorage.getItem(this.JWT_TOKEN);\n    }\n\n    getUserDetails() {\n      const token = this.getToken();\n      let payload;\n\n      if (token) {\n        payload = token.split('.')[1];\n        payload = window.atob(payload);\n        return JSON.parse(payload);\n      } else {\n        return null;\n      }\n    }\n\n    getUserId() {\n      if (this.isLoggedIn()) {\n        const payLoad = JSON.parse(window.atob(localStorage.getItem(this.JWT_TOKEN).split('.')[1]));\n        return payLoad.id;\n      }\n    }\n\n    getUserName() {\n      if (this.isLoggedIn()) {\n        const payLoad = JSON.parse(window.atob(localStorage.getItem(this.JWT_TOKEN).split('.')[1]));\n        return payLoad.name;\n      }\n\n      const token = this.getToken();\n      let payload;\n\n      if (token) {\n        payload = token.split('.')[1];\n        payload = window.atob(payload);\n        const user = JSON.parse(payload);\n        return user.name;\n      } else {\n        return null;\n      }\n    }\n\n    getToken() {\n      // if (!this.token) {\n      //     this.token = localStorage.getItem(this.JWT_TOKEN);\n      // }\n      return localStorage.getItem(this.JWT_TOKEN);\n    }\n\n    loggedIn() {\n      const user = this.getUserDetails();\n\n      if (user) {\n        return user.exp > Date.now() / 1000;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AppConfig));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}