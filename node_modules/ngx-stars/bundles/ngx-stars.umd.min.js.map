{"version":3,"sources":["../../../projects/ngx-stars/src/lib/ngx-stars.component.ts","../../../projects/ngx-stars/src/lib/ngx-stars.module.ts"],"names":["NgxStarsComponent","_this","this","maxStars","initialStars","animationSpeed","wholeStars","ratingOutput","EventEmitter","customClassIdentifier","Math","random","toString","substring","safeSize","Number","isInteger","size","prototype","ngOnInit","setupStarImages","editableStars","Array","from","map","elem","index","EditableStar","setRating","animation","animationInterval","setInterval","starAnimation","bind","ngOnDestroy","customCssClasses","forEach","style","parentNode","removeChild","customStarIcons","Object","keys","key","starType","classname","getStarClass","createCssClass","clazz","document","createElement","type","innerHTML","getElementsByTagName","appendChild","push","starPadding","margin-right","customPadding","starColorAndSize","assign","starColor","starSize","background-color","color","height","width","animationRunning","rating","cancelStarAnimation","clearInterval","round","onStarsUnhover","onStarHover","event","clickedStar","clickedInFirstHalf","star","position","onStarClick","emit","onZeroStarClick","onZeroStarHover","starNumber","starIcon","target","pageX","getBoundingClientRect","left","offsetWidth","noop","getAriaLabel","readonly","Component","args","selector","template","Input","Output","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'ngx-stars',\n  templateUrl: './ngx-stars.component.html',\n  styleUrls: [ './ngx-stars.component.css' ],\n})\nexport class NgxStarsComponent implements OnInit, OnDestroy {\n\n  @Input()\n  maxStars: number = 5;\n\n  @Input()\n  initialStars: number = 0;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  size: number;\n\n  @Input()\n  color: string;\n\n  @Input()\n  animation: boolean;\n\n  @Input()\n  animationSpeed: number = 100;\n\n  @Input()\n  customPadding: string;\n\n  @Input()\n  wholeStars: boolean = false;\n\n  @Input()\n  customStarIcons: { empty: string, half: string, full: string };\n\n  @Output()\n  ratingOutput: EventEmitter<number> = new EventEmitter();\n\n  rating: number;\n  editableStars: EditableStar[];\n  animationInterval: any;\n  animationRunning: boolean;\n\n  private customCssClasses: HTMLStyleElement[];\n  private customClassIdentifier = Math.random().toString(36).substring(2);\n\n  ngOnInit(): void {\n    this.setupStarImages();\n    this.editableStars = Array.from(new Array(this.maxStars)).map((elem, index) => new EditableStar(index));\n    this.setRating(this.initialStars);\n\n    if (this.animation) {\n      this.animationInterval = setInterval(this.starAnimation.bind(this), this.animationSpeed);\n    }\n  }\n\n  ngOnDestroy(): void {\n    // remove the three custom classes we created if custom image urls were provided\n    if (this.customCssClasses) {\n      this.customCssClasses.forEach(style => {\n        if (style && style.parentNode) {\n          style.parentNode.removeChild(style);\n        }\n      });\n    }\n  }\n\n  private setupStarImages() {\n    if (this.customStarIcons) {\n      this.customCssClasses = [];\n      Object.keys(this.customStarIcons).map(key => key as StarType).forEach(starType => {\n        const classname = this.getStarClass(starType);\n        this.createCssClass(classname, starType);\n      });\n    }\n  }\n\n  private createCssClass(classname: string, starType: StarType) {\n    const clazz = document.createElement('style');\n    clazz.type = 'text/css';\n    clazz.innerHTML = `.${classname} {\n      -webkit-mask-image: url(${this.customStarIcons[starType]});\n      mask-image: url(${this.customStarIcons[starType]});\n    }`;\n    document.getElementsByTagName('head')[0].appendChild(clazz);\n    this.customCssClasses.push(clazz);\n  }\n\n  starPadding(): { [p: string]: string } {\n    return { 'margin-right': this.customPadding || `0.${this.safeSize()}rem` };\n  }\n\n  starColorAndSize(): { [p: string]: string } {\n    return Object.assign({}, this.starColor(), this.starSize());\n  }\n\n  private starColor(): { [p: string]: string } {\n    return { 'background-color': this.color || 'crimson' };\n  }\n\n  starSize(): { [p: string]: string } {\n    return {\n      height: `${15 * this.safeSize()}px`,\n      width: `${16 * this.safeSize()}px`,\n    };\n  }\n\n  private safeSize = () => (Number.isInteger(this.size) && this.size > 0 && this.size < 6) ? this.size : 1;\n\n  starAnimation(): void {\n    this.animationRunning = true;\n    if (this.rating < this.maxStars) {\n      this.setRating(this.rating += 0.5);\n    }\n    else {\n      this.setRating(0);\n    }\n  }\n\n  cancelStarAnimation(): void {\n    if (this.animationRunning) {\n      clearInterval(this.animationInterval);\n      this.rating = 0;\n      this.animationRunning = false;\n    }\n  }\n\n  setRating(rating: number) {\n    this.rating = Math.round(rating * 2) / 2;\n    this.onStarsUnhover();\n  }\n\n  onStarHover(event: MouseEvent, clickedStar: EditableStar): void {\n    this.cancelStarAnimation();\n\n    const clickedInFirstHalf = this.clickedInFirstHalf(event);\n\n    // fill in either a half or whole star depending on where user clicked\n    clickedStar.classname = (!this.wholeStars && clickedInFirstHalf) ? this.getStarClass('half') : this.getStarClass('full');\n\n    // fill in all stars in previous positions and clear all in later ones\n    this.editableStars.forEach(star => {\n      if (star.position > clickedStar.position) {\n        star.classname = this.getStarClass('empty');\n      }\n      else if (star.position < clickedStar.position) {\n        star.classname = this.getStarClass('full');\n      }\n    });\n  }\n\n  onStarClick(event: MouseEvent, clickedStar: EditableStar): void {\n    this.cancelStarAnimation();\n\n    // lock in current rating\n    const clickedInFirstHalf = this.clickedInFirstHalf(event);\n    this.rating = clickedStar.position + ((!this.wholeStars && clickedInFirstHalf) ? 0.5 : 1);\n    this.ratingOutput.emit(this.rating);\n  }\n\n  // hidden star to left of first star lets user click there to set to 0\n  onZeroStarClick(): void {\n    this.setRating(0);\n    this.ratingOutput.emit(this.rating);\n  }\n\n  onZeroStarHover(): void {\n    // clear all stars\n    this.editableStars.forEach(star => star.classname = this.getStarClass('empty'));\n  }\n\n  onStarsUnhover() {\n    // when user stops hovering we want to make stars reflect the last rating applied by clicking\n    this.editableStars.forEach(star => {\n      const starNumber = star.position + 1;\n      if (this.rating >= starNumber) {\n        star.classname = this.getStarClass('full');\n      }\n      else if (this.rating > starNumber - 1 && this.rating < starNumber) {\n        star.classname = this.getStarClass('half');\n      }\n      else {\n        star.classname = this.getStarClass('empty');\n      }\n    });\n  }\n\n  private clickedInFirstHalf(event: MouseEvent): boolean {\n    const starIcon = event.target as HTMLElement;\n    return event.pageX < starIcon.getBoundingClientRect().left + starIcon.offsetWidth / 2;\n  }\n\n  noop(): void {}\n\n  private getStarClass(starType: StarType) {\n    if (this.customCssClasses) {\n      return `ngx-stars-star-${starType}-${this.customClassIdentifier}`;\n    }\n    return `star-${starType}`;\n  }\n\n  // this and the aria-labels and role in the html inspired by https://stackoverflow.com/q/55966205\n  getAriaLabel(): string {\n    return `Rating: ${this.rating} out of ${this.maxStars} stars ${this.readonly ? '' : '. Can be edited.'}`;\n  }\n}\n\nexport type StarType = 'empty' | 'half' | 'full';\n\nexport class EditableStar {\n  position: number;\n  classname: string;\n\n  constructor(position: number) {\n    this.position = position;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxStarsComponent } from './ngx-stars.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxStarsComponent\n  ],\n  exports: [\n    NgxStarsComponent\n  ]\n})\nexport class NgxStarsModule { }\n"]}