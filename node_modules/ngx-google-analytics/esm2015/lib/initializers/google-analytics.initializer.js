import { __awaiter } from "tslib";
import { APP_INITIALIZER, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';
import { DOCUMENT } from '@angular/common';
/**
 * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.
 */
export const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
        NGX_GTAG_FN,
        DOCUMENT
    ]
};
/**
 * Create a script element on DOM and link it to Google Analytics tracking code URI.
 * After that, execute exactly same init process as tracking snippet code.
 */
export function GoogleAnalyticsInitializer(settings, gtag, document) {
    return () => __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!settings.trackingCode) {
            if (!isDevMode()) {
                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
            }
            return;
        }
        if (!gtag) {
            if (!isDevMode()) {
                console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');
            }
            return;
        }
        if (!document) {
            if (!isDevMode()) {
                console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');
            }
        }
        // Set default ga.js uri
        settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;
        // these commands should run first!
        settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];
        // assert config command
        if (!settings.initCommands.find(x => x.command === 'config')) {
            settings.initCommands.unshift({ command: 'config', values: [settings.trackingCode] });
        }
        // assert js command
        if (!settings.initCommands.find(x => x.command === 'js')) {
            settings.initCommands.unshift({ command: 'js', values: [new Date()] });
        }
        for (const command of settings.initCommands) {
            gtag(command.command, ...command.values);
        }
        const s = document.createElement('script');
        s.async = true;
        s.src = settings.uri;
        if (settings.nonce) {
            s.setAttribute('nonce', settings.nonce);
        }
        const head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1nb29nbGUtYW5hbHl0aWNzL3NyYy9saWIvaW5pdGlhbGl6ZXJzL2dvb2dsZS1hbmFseXRpY3MuaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBR3BHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBYTtJQUNqRSxPQUFPLEVBQUUsZUFBZTtJQUN4QixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSwwQkFBMEI7SUFDdEMsSUFBSSxFQUFFO1FBQ0osbUNBQW1DO1FBQ25DLFdBQVc7UUFDWCxRQUFRO0tBQ1Q7Q0FDRixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxRQUFrQyxFQUNsQyxJQUFZLEVBQ1osUUFBa0I7SUFFbEIsT0FBTyxHQUFTLEVBQUU7O1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO2FBQ2pJO1lBRUQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5SEFBeUgsQ0FBQyxDQUFDO2FBQzFJO1lBRUQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQywrSEFBK0gsQ0FBQyxDQUFDO2FBQ2hKO1NBQ0Y7UUFFRCx3QkFBd0I7UUFDeEIsUUFBUSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLCtDQUErQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdEcsbUNBQW1DO1FBQ25DLFFBQVEsQ0FBQyxZQUFZLEdBQUcsTUFBQSxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsWUFBWSxtQ0FBSSxFQUFFLENBQUM7UUFFckQsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLEVBQzVEO1lBQ0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUUsRUFBRSxDQUFDLENBQUE7U0FDeEY7UUFFRCxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsRUFDeEQ7WUFDRSxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBRSxFQUFFLENBQUMsQ0FBQTtTQUN6RTtRQUVELEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxQztRQUVELE1BQU0sQ0FBQyxHQUFzQixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBRXJCLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUNsQixDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekM7UUFFRCxNQUFNLElBQUksR0FBb0IsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFBLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIEFQUF9JTklUSUFMSVpFUiwgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTiB9IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncy10b2tlbic7XG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncyc7XG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZCB9IGZyb20gJy4uL2ludGVyZmFjZXMvaS1nb29nbGUtYW5hbHl0aWNzLWNvbW1hbmQnO1xuaW1wb3J0IHsgTkdYX0dUQUdfRk4gfSBmcm9tICcuLi90b2tlbnMvbmd4LWd0YWctdG9rZW4nO1xuaW1wb3J0IHsgR3RhZ0ZuIH0gZnJvbSAnLi4vdHlwZXMvZ3RhZy50eXBlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBQcm92aWRlIGEgREkgQ29uZmlndXJhdGlvbiB0byBhdHRhY2ggR0EgSW5pdGlhbGl6YXRpb24gYXQgQW5ndWxhciBTdGFydHVwIEN5Y2xlLlxuICovXG5leHBvcnQgY29uc3QgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfSU5JVElBTElaRVJfUFJPVklERVI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gIG11bHRpOiB0cnVlLFxuICB1c2VGYWN0b3J5OiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcixcbiAgZGVwczogW1xuICAgIE5HWF9HT09HTEVfQU5BTFlUSUNTX1NFVFRJTkdTX1RPS0VOLFxuICAgIE5HWF9HVEFHX0ZOLFxuICAgIERPQ1VNRU5UXG4gIF1cbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgc2NyaXB0IGVsZW1lbnQgb24gRE9NIGFuZCBsaW5rIGl0IHRvIEdvb2dsZSBBbmFseXRpY3MgdHJhY2tpbmcgY29kZSBVUkkuXG4gKiBBZnRlciB0aGF0LCBleGVjdXRlIGV4YWN0bHkgc2FtZSBpbml0IHByb2Nlc3MgYXMgdHJhY2tpbmcgc25pcHBldCBjb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gR29vZ2xlQW5hbHl0aWNzSW5pdGlhbGl6ZXIoXG4gIHNldHRpbmdzOiBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3MsXG4gIGd0YWc6IEd0YWdGbixcbiAgZG9jdW1lbnQ6IERvY3VtZW50XG4pIHtcbiAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXNldHRpbmdzLnRyYWNraW5nQ29kZSkge1xuICAgICAgaWYgKCFpc0Rldk1vZGUoKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFbXB0eSB0cmFja2luZyBjb2RlIGZvciBHb29nbGUgQW5hbHl0aWNzLiBNYWtlIHN1cmUgdG8gcHJvdmlkZSBvbmUgd2hlbiBpbml0aWFsaXppbmcgTmd4R29vZ2xlQW5hbHl0aWNzTW9kdWxlLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFndGFnKSB7XG4gICAgICBpZiAoIWlzRGV2TW9kZSgpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dhcyBub3QgcG9zc2libGUgY3JlYXRlIG9yIHJlYWQgZ3RhZygpIGZuLiBNYWtlIHN1cmUgdGhpcyBtb2R1bGUgaXMgcnVubmluZyBvbiBhIEJyb3dzZXIgdy8gYWNjZXNzIHRvIFdpbmRvdyBpbnRlcmZhY2UuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICBpZiAoIWlzRGV2TW9kZSgpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dhcyBub3QgcG9zc2libGUgdG8gYWNjZXNzIERvY3VtZW50IGludGVyZmFjZS4gTWFrZSBzdXJlIHRoaXMgbW9kdWxlIGlzIHJ1bm5pbmcgb24gYSBCcm93c2VyIHcvIGFjY2VzcyBkbyBEb2N1bWVudCBpbnRlcmZhY2UuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGRlZmF1bHQgZ2EuanMgdXJpXG4gICAgc2V0dGluZ3MudXJpID0gc2V0dGluZ3MudXJpIHx8IGBodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPSR7c2V0dGluZ3MudHJhY2tpbmdDb2RlfWA7XG5cbiAgICAvLyB0aGVzZSBjb21tYW5kcyBzaG91bGQgcnVuIGZpcnN0IVxuICAgIHNldHRpbmdzLmluaXRDb21tYW5kcyA9IHNldHRpbmdzPy5pbml0Q29tbWFuZHMgPz8gW107XG5cbiAgICAvLyBhc3NlcnQgY29uZmlnIGNvbW1hbmRcbiAgICBpZiAoIXNldHRpbmdzLmluaXRDb21tYW5kcy5maW5kKHggPT4geC5jb21tYW5kID09PSAnY29uZmlnJykpXG4gICAge1xuICAgICAgc2V0dGluZ3MuaW5pdENvbW1hbmRzLnVuc2hpZnQoeyBjb21tYW5kOiAnY29uZmlnJywgdmFsdWVzOiBbIHNldHRpbmdzLnRyYWNraW5nQ29kZSBdIH0pXG4gICAgfVxuXG4gICAgLy8gYXNzZXJ0IGpzIGNvbW1hbmRcbiAgICBpZiAoIXNldHRpbmdzLmluaXRDb21tYW5kcy5maW5kKHggPT4geC5jb21tYW5kID09PSAnanMnKSlcbiAgICB7XG4gICAgICBzZXR0aW5ncy5pbml0Q29tbWFuZHMudW5zaGlmdCh7IGNvbW1hbmQ6ICdqcycsIHZhbHVlczogWyBuZXcgRGF0ZSgpIF0gfSlcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2Ygc2V0dGluZ3MuaW5pdENvbW1hbmRzKSB7XG4gICAgICBndGFnKGNvbW1hbmQuY29tbWFuZCwgLi4uY29tbWFuZC52YWx1ZXMpO1xuICAgIH1cblxuICAgIGNvbnN0IHM6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgcy5hc3luYyA9IHRydWU7XG4gICAgcy5zcmMgPSBzZXR0aW5ncy51cmk7XG5cbiAgICBpZiAoc2V0dGluZ3Mubm9uY2UpIHtcbiAgICAgIHMuc2V0QXR0cmlidXRlKCdub25jZScsIHNldHRpbmdzLm5vbmNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkOiBIVE1MSGVhZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQocyk7XG4gIH07XG59XG4iXX0=