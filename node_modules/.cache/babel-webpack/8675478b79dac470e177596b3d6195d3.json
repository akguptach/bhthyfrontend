{"ast":null,"code":"import _asyncToGenerator from \"E:/bethy/new/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Signal_R from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"../config/config\";\nimport * as i3 from \"../shared/customFunctions/customFunctions\";\nexport let SignalRService = /*#__PURE__*/(() => {\n  class SignalRService {\n    constructor(authService, appConfig, customFunction) {\n      this.authService = authService;\n      this.appConfig = appConfig;\n      this.customFunction = customFunction;\n      this.serverurl = `${this.appConfig.setting.PathAPI}MessageHub`;\n    }\n\n    connect() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const options2 = {\n          accessTokenFactory: () => {\n            return _this.authService.getJwtToken();\n          }\n        };\n\n        if (SignalRService.signalRIsConnected === false) {\n          _this.signalRConnection = yield new Signal_R.HubConnectionBuilder().withUrl(_this.serverurl, options2).build(); // 2.Initialize signalRConnection\n\n          if (_this.signalRConnection) {\n            yield _this.signalRConnection.start() // tslint:disable-next-line:max-line-length\n            // When new ContectingClient Connects to the Hub we will invoke JoinChannel function on the Hub,passing to it a Name of the Client and Channel ID\n            .then(() => {\n              SignalRService.signalRIsConnected = true;\n              console.log('connected ');\n            }).catch(err => console.log('Error while starting signalRConnection: ' + err));\n\n            _this.signalRConnection.on('connecting', connecting => {\n              console.log('connecting ', connecting); // this.customFunction.showResponseMessage('connecting', 'connecting' , 'success' , 'end');\n              // tslint:disable-next-line:max-line-length\n              // this._snackBar.open( 'notificationRequest' , '×', { panelClass: ['mat-snakbar-success'] , horizontalPosition: 'end' , verticalPosition: 'top' , duration: 60000000 });\n            });\n          }\n        }\n      })();\n    }\n\n    onAddNewRequest(arrList) {\n      if (this.signalRConnection) {\n        this.signalRConnection.on('NewRequest', data => {\n          console.log('NewRequest', data); // push get Data To Array To Show The Notification In Toolbar Notification\n\n          arrList.push(data);\n          this.customFunction.showResponseMessage(data.message, data.message);\n        });\n      }\n    }\n\n    onAdviserRegister(arrList) {\n      if (this.signalRConnection) {\n        this.signalRConnection.on('NewAdviser', data => {\n          console.log('NewAdviser', data); // push get Data To Array To Show The Notification In Toolbar Notification\n\n          arrList.push(data);\n          this.customFunction.showResponseMessage(data.message, data.message);\n        });\n      }\n    }\n\n    joinToGroup(chatRoomId) {\n      if (this.signalRConnection) {\n        this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n          console.log('join to  group done');\n        }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\n      } else {\n        this.connect().then(() => {\n          this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n            console.log('join to  group done');\n          }).catch(err => console.log('Error while join to group signalRConnection: ' + err));\n        });\n      }\n    }\n\n    typingInGroup(chatRoomId) {\n      if (this.signalRConnection) {\n        this.signalRConnection.invoke('JoinGroup', chatRoomId).then(() => {\n          console.log('typingInGroup done');\n        }).catch(err => console.log('Error while typingInGroup to group signalRConnection: ' + err));\n      }\n    }\n\n    leaveGroup(chatRoomId) {\n      if (this.signalRConnection) {\n        this.signalRConnection.invoke('LeaveGroup', chatRoomId).then(() => {\n          console.log('LeaveGroup  group done');\n        }).catch(err => console.log('Error while leave group signalRConnection: ' + err));\n      }\n    }\n\n    sendMessage(message) {\n      if (this.signalRConnection) {\n        this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\n          console.log('SendMessageToGroup   done');\n        }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\n      } else {\n        this.connect().then(() => {\n          this.signalRConnection.invoke('SendMessageToGroup', message).then(() => {\n            console.log('SendMessageToGroup   done');\n          }).catch(err => console.log('Error while  SendMessageToGroup: ' + err));\n        });\n      }\n    }\n\n    onJoinToGroup() {\n      this.signalRConnection.on('JoinToGropeMessage', (message, userId) => {\n        console.log('JoinToGropeMessage user ', userId, 'message', message);\n\n        if (userId !== this.authService.getUserId()) {\n          // tslint:disable-next-line:max-line-length\n          // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n          return message;\n        } else {\n          return null;\n        }\n      });\n    }\n\n    receiveMessageInGroup(messagesList) {\n      this.signalRConnection.on('ReceiveMessageInGroup', message => {\n        console.log('receiveMessageInGroup user ', message);\n\n        if (!messagesList.find(m => m.id === message.id)) {\n          messagesList.push(message);\n        }\n\n        return message;\n      });\n    }\n\n    onLeaveGroup() {\n      this.signalRConnection.on('UserLeaveGroup', (message, userId) => {\n        console.log(' UserLeaveGroup user ', message, userId);\n\n        if (userId !== this.authService.getUserId()) {\n          // tslint:disable-next-line:max-line-length\n          // this._snackBar.open( message, '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n          return message;\n        } else {\n          return null;\n        }\n      });\n    }\n\n    onTyping() {\n      this.signalRConnection.on('TypingMessage', (message, userId) => {\n        console.log('TypingMessage user ', message, userId); // if (userId !== this.authService.getUserId()) {\n        //   return message;\n        // }\n      });\n    }\n\n    onUpdateProjectOffer() {\n      this.signalRConnection.on('UpdateProjectOffer', data => {\n        console.log('UpdateProjectOffer user ', data);\n        this.customFunction.showResponseMessage(data.message, true); // if (userId !== this.authService.getUserId()) {\n        //   return message;\n        // }\n      });\n    }\n\n    readMessage(messageId) {\n      if (this.signalRConnection) {\n        console.log(' messageId  ', messageId);\n        this.signalRConnection.invoke('IsRead', messageId).then(() => {\n          this.signalRConnection.on('IsRead', Id => {\n            console.log(' IsRead  ', Id); // this.customFunction.showResponseMessage('IsRead' , 'IsRead');\n            // tslint:disable-next-line:max-line-length\n            // this._snackBar.open( 'read meesage', '×', { panelClass: 'success', verticalPosition: 'top' , horizontalPosition: 'start' , duration: 3000 });\n          });\n        }).catch(err => console.log('Error while read Message : ' + err));\n      }\n    }\n\n  }\n\n  SignalRService.signalRIsConnected = false;\n\n  SignalRService.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.AppConfig), i0.ɵɵinject(i3.CustomFunctions));\n  };\n\n  SignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n  return SignalRService;\n})();","map":null,"metadata":{},"sourceType":"module"}