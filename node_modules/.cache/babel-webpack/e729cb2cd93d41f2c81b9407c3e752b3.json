{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"captchaWrapperElem\"];\n\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\n\n    this.windowGrecaptcha = 'grecaptcha';\n    /**\r\n    * Name of the global callback\r\n    */\n\n    this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n    this.globalDomain = 'recaptcha.net';\n    this.defaultDomain = 'google.com';\n  }\n\n  registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\n    if (this.grecaptchaScriptLoaded()) {\n      // recaptcha script is already loaded\n      // just call the callback\n      this.zone.run(() => {\n        onLoad(window[this.windowGrecaptcha]);\n      });\n      return;\n    } // we need to patch the callback through global variable, otherwise callback is not accessible\n    // note: https://github.com/Enngage/ngx-captcha/issues/2\n\n\n    window[this.windowOnLoadCallbackProperty] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha])); // prepare script elem\n\n\n    const scriptElem = document.createElement('script');\n    scriptElem.innerHTML = '';\n    scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n    scriptElem.async = true;\n    scriptElem.defer = true; // add script to header\n\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n\n  cleanup() {\n    window[this.windowOnLoadCallbackProperty] = undefined;\n    window[this.windowGrecaptcha] = undefined;\n  }\n  /**\r\n   * Indicates if google recaptcha script is available and ready to be used\r\n   */\n\n\n  grecaptchaScriptLoaded() {\n    if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Gets language param used in script url\r\n   */\n\n\n  getLanguageParam(hl) {\n    if (!hl) {\n      return '';\n    }\n\n    return `&hl=${hl}`;\n  }\n  /**\r\n  * Url to google api script\r\n  */\n\n\n  getCaptchaScriptUrl(useGlobalDomain, render, language) {\n    const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain; // tslint:disable-next-line:max-line-length\n\n    return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass BaseReCaptchaComponent {\n  constructor(renderer, zone, injector, scriptService) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * Prefix of the captcha element\r\n     */\n\n    this.captchaElemPrefix = \"ngx_captcha_id_\";\n    this.setupCaptcha = true;\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\n\n    this.useGlobalDomain = false;\n    /**\r\n     * Type\r\n     */\n\n    this.type = \"image\";\n    /**\r\n     * Tab index\r\n     */\n\n    this.tabIndex = 0;\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     */\n\n    this.success = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     */\n\n    this.load = new EventEmitter();\n    /**\r\n     * Called when captcha is reset.\r\n     */\n\n    this.reset = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     */\n\n    this.ready = new EventEmitter();\n    /**\r\n     * Error callback\r\n     */\n\n    this.error = new EventEmitter();\n    /**\r\n     * Expired callback\r\n     */\n\n    this.expire = new EventEmitter();\n    /**\r\n     * Indicates if captcha should be set on load\r\n     */\n\n    this.setupAfterLoad = false;\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     */\n\n    this.resetCaptchaAfterSuccess = false;\n    /**\r\n     * Indicates if captcha is loaded\r\n     */\n\n    this.isLoaded = false;\n  }\n\n  ngAfterViewInit() {\n    this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\n  }\n\n  ngAfterViewChecked() {\n    if (this.setupCaptcha) {\n      this.setupCaptcha = false;\n      this.setupComponent();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // cleanup scripts if language changed because they need to be reloaded\n    if (changes && changes.hl) {\n      // cleanup scripts when language changes\n      if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n\n    if (changes && changes.useGlobalDomain) {\n      // cleanup scripts when domain changes\n      if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n\n    this.setupCaptcha = true;\n  }\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   */\n\n\n  getResponse() {\n    return this.reCaptchaApi.getResponse(this.captchaId);\n  }\n  /**\r\n   * Gets Id of captcha widget\r\n   */\n\n\n  getCaptchaId() {\n    return this.captchaId;\n  }\n  /**\r\n   * Resets captcha\r\n   */\n\n\n  resetCaptcha() {\n    this.zone.run(() => {\n      // reset captcha using Google js api\n      this.reCaptchaApi.reset(); // required due to forms\n\n      this.onChange(undefined);\n      this.onTouched(undefined); // trigger reset event\n\n      this.reset.next();\n    });\n  }\n  /**\r\n   * Gets last submitted captcha response\r\n   */\n\n\n  getCurrentResponse() {\n    return this.currentResponse;\n  }\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   */\n\n\n  reloadCaptcha() {\n    this.setupComponent();\n  }\n\n  ensureCaptchaElem(captchaElemId) {\n    const captchaElem = document.getElementById(captchaElemId);\n\n    if (!captchaElem) {\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n    } // assign captcha alem\n\n\n    this.captchaElem = captchaElem;\n  }\n  /**\r\n   * Responsible for instantiating captcha element\r\n   */\n\n\n  renderReCaptcha() {\n    // run outside angular zone due to timeout issues when testing\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\n    this.zone.runOutsideAngular(() => {\n      // to fix reCAPTCHA placeholder element must be an element or id\n      // https://github.com/Enngage/ngx-captcha/issues/96\n      setTimeout(() => {\n        this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n        this.ready.next();\n      }, 0);\n    });\n  }\n  /**\r\n   * Called when captcha receives response\r\n   * @param callback Callback\r\n   */\n\n\n  handleCallback(callback) {\n    this.currentResponse = callback;\n    this.success.next(callback);\n    this.zone.run(() => {\n      this.onChange(callback);\n      this.onTouched(callback);\n    });\n\n    if (this.resetCaptchaAfterSuccess) {\n      this.resetCaptcha();\n    }\n  }\n\n  getPseudoUniqueNumber() {\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n  }\n\n  setupComponent() {\n    // captcha specific setup\n    this.captchaSpecificSetup(); // create captcha wrapper\n\n    this.createAndSetCaptchaElem();\n    this.scriptService.registerCaptchaScript(this.useGlobalDomain, \"explicit\", grecaptcha => {\n      this.onloadCallback(grecaptcha);\n    }, this.hl);\n  }\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   */\n\n\n  onloadCallback(grecapcha) {\n    // assign reference to reCaptcha Api once its loaded\n    this.reCaptchaApi = grecapcha;\n\n    if (!this.reCaptchaApi) {\n      throw Error(`ReCaptcha Api was not initialized correctly`);\n    } // loaded flag\n\n\n    this.isLoaded = true; // fire load event\n\n    this.load.next(); // render captcha\n\n    this.renderReCaptcha(); // setup component if it was flagged as such\n\n    if (this.setupAfterLoad) {\n      this.setupAfterLoad = false;\n      this.setupComponent();\n    }\n  }\n\n  generateNewElemId() {\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n  }\n\n  createAndSetCaptchaElem() {\n    // generate new captcha id\n    this.captchaElemId = this.generateNewElemId();\n\n    if (!this.captchaElemId) {\n      throw Error(`Captcha elem Id is not set`);\n    }\n\n    if (!this.captchaWrapperElem) {\n      throw Error(`Captcha DOM element is not initialized`);\n    } // remove old html\n\n\n    this.captchaWrapperElem.nativeElement.innerHTML = \"\"; // create new wrapper for captcha\n\n    const newElem = this.renderer.createElement(\"div\");\n    newElem.id = this.captchaElemId;\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem); // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n\n    setTimeout(() => {\n      // update captcha elem\n      if (this.captchaElemId) {\n        this.ensureCaptchaElem(this.captchaElemId);\n      }\n    }, 0);\n  }\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   */\n\n\n  writeValue(obj) {}\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   */\n\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\r\n   * Handles error callback\r\n   */\n\n\n  handleErrorCallback() {\n    this.zone.run(() => {\n      this.onChange(undefined);\n      this.onTouched(undefined);\n    });\n    this.error.next();\n  }\n  /**\r\n   * Handles expired callback\r\n   */\n\n\n  handleExpireCallback() {\n    this.expire.next(); // reset captcha on expire callback\n\n    this.resetCaptcha();\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nBaseReCaptchaComponent.ɵfac = function BaseReCaptchaComponent_Factory(t) {\n  return new (t || BaseReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nBaseReCaptchaComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseReCaptchaComponent,\n  inputs: {\n    siteKey: \"siteKey\",\n    useGlobalDomain: \"useGlobalDomain\",\n    type: \"type\",\n    hl: \"hl\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    success: \"success\",\n    load: \"load\",\n    reset: \"reset\",\n    ready: \"ready\",\n    error: \"error\",\n    expire: \"expire\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseReCaptchaComponent, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    siteKey: [{\n      type: Input\n    }],\n    useGlobalDomain: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    success: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    reset: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    expire: [{\n      type: Output\n    }]\n  });\n})();\n\nvar ReCaptchaType;\n\n(function (ReCaptchaType) {\n  ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\n  ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * This size representing invisible captcha\r\n     */\n\n    this.size = 'invisible';\n    /**\r\n     * Theme\r\n     */\n\n    this.theme = 'light';\n    /**\r\n     * Badge\r\n     */\n\n    this.badge = 'bottomright';\n    this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n  }\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\n\n\n  execute() {\n    // execute captcha\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n  }\n\n  captchaSpecificSetup() {}\n  /**\r\n  * Gets reCaptcha properties\r\n  */\n\n\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) {\n  return new (t || InvisibleReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nInvisibleReCaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InvisibleReCaptchaComponent,\n  selectors: [[\"ngx-invisible-recaptcha\"]],\n  viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    badge: \"badge\",\n    hl: \"hl\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-invisible-recaptcha',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n    * Name of the global expire callback\r\n    */\n\n    this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n    /**\r\n    * Name of the global error callback\r\n    */\n\n    this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n    /**\r\n     * Theme\r\n     */\n\n    this.theme = 'light';\n    /**\r\n    * Size\r\n    */\n\n    this.size = 'normal';\n    this.recaptchaType = ReCaptchaType.ReCaptcha2;\n  }\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy() {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n\n  captchaSpecificSetup() {\n    this.registerCallbacks();\n  }\n  /**\r\n   * Gets reCaptcha properties\r\n  */\n\n\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n  /**\r\n   * Registers global callbacks\r\n  */\n\n\n  registerCallbacks() {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) {\n  return new (t || ReCaptcha2Component)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nReCaptcha2Component.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ReCaptcha2Component,\n  selectors: [[\"ngx-recaptcha2\"]],\n  viewQuery: function ReCaptcha2Component_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    size: \"size\",\n    hl: \"hl\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ReCaptcha2Component),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function ReCaptcha2Component_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptcha2Component, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-recaptcha2',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ReCaptcha2Component),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass ReCaptchaV3Service {\n  constructor(scriptService, zone) {\n    this.scriptService = scriptService;\n    this.zone = zone;\n  }\n  /**\r\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\n\n\n  execute(siteKey, action, callback, config, errorCallback) {\n    this.executeAsPromise(siteKey, action, config).then(callback).catch(error => errorCallback ? errorCallback(error) : console.error(error));\n  }\n  /**\r\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   */\n\n\n  executeAsPromise(siteKey, action, config) {\n    return new Promise((resolve, reject) => {\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\n\n      const onRegister = grecaptcha => {\n        this.zone.runOutsideAngular(() => {\n          try {\n            grecaptcha.execute(siteKey, {\n              action\n            }).then(token => this.zone.run(() => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n\n      this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\n    });\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(i0.ɵɵinject(ScriptService), i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass NgxCaptchaModule {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) {\n  return new (t || NgxCaptchaModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxCaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxCaptchaModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxCaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, ReCaptchaV3Service],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ReCaptcha2Component, InvisibleReCaptchaComponent],\n      providers: [ScriptService, ReCaptchaV3Service],\n      exports: [ReCaptcha2Component, InvisibleReCaptchaComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };","map":{"version":3,"sources":["E:/bethy/new/frontend/node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs"],"names":["i0","Injectable","EventEmitter","InjectFlags","Directive","Input","Output","forwardRef","Component","ViewChild","NgModule","NgControl","NG_VALUE_ACCESSOR","CommonModule","ScriptService","constructor","zone","windowGrecaptcha","windowOnLoadCallbackProperty","globalDomain","defaultDomain","registerCaptchaScript","useGlobalDomain","render","onLoad","language","grecaptchaScriptLoaded","run","window","bind","scriptElem","document","createElement","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","undefined","getLanguageParam","hl","domain","ɵfac","NgZone","ɵprov","type","BaseReCaptchaComponent","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","tabIndex","success","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","isLoaded","ngAfterViewInit","control","get","Optional","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","onChange","onTouched","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","getElementById","Error","renderReCaptcha","runOutsideAngular","setTimeout","getCaptchaProperties","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","id","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","Renderer2","Injector","ɵdir","siteKey","ReCaptchaType","InvisibleReCaptchaComponent","size","theme","badge","recaptchaType","InvisibleReCaptcha","execute","response","ɵcmp","provide","useExisting","multi","args","selector","template","providers","static","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","ReCaptcha2","ngOnDestroy","registerCallbacks","ReCaptchaV3Service","action","config","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","onRegister","token","NgxCaptchaModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n        * Name of the global callback\r\n        */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (() => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha])));\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    cleanup() {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    grecaptchaScriptLoaded() {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    getCaptchaScriptUrl(useGlobalDomain, render, language) {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass BaseReCaptchaComponent {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = \"ngx_captcha_id_\";\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = \"image\";\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange &&\r\n                changes.hl.currentValue !== changes.hl.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange &&\r\n                changes.useGlobalDomain.currentValue !==\r\n                    changes.useGlobalDomain.previousValue) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    ensureCaptchaElem(captchaElemId) {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            // to fix reCAPTCHA placeholder element must be an element or id\r\n            // https://github.com/Enngage/ngx-captcha/issues/96\r\n            setTimeout(() => {\r\n                this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n                this.ready.next();\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, \"explicit\", (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement(\"div\");\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ BaseReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: BaseReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ /** @nocollapse */ BaseReCaptchaComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.3\", type: BaseReCaptchaComponent, inputs: { siteKey: \"siteKey\", useGlobalDomain: \"useGlobalDomain\", type: \"type\", hl: \"hl\", tabIndex: \"tabIndex\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: BaseReCaptchaComponent, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], useGlobalDomain: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], success: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], reset: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], expire: [{\r\n                type: Output\r\n            }] } });\n\nvar ReCaptchaType;\r\n(function (ReCaptchaType) {\r\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\r\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\r\n})(ReCaptchaType || (ReCaptchaType = {}));\n\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n    }\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ InvisibleReCaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: InvisibleReCaptchaComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ /** @nocollapse */ InvisibleReCaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.3\", type: InvisibleReCaptchaComponent, selector: \"ngx-invisible-recaptcha\", inputs: { theme: \"theme\", badge: \"badge\", hl: \"hl\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: InvisibleReCaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-invisible-recaptcha',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => InvisibleReCaptchaComponent)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], badge: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n        * Name of the global expire callback\r\n        */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n        * Name of the global error callback\r\n        */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n        * Size\r\n        */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n    */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n            'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n            'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n    */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ ReCaptcha2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ReCaptcha2Component, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i0.Injector }, { token: ScriptService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ /** @nocollapse */ ReCaptcha2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.3\", type: ReCaptcha2Component, selector: \"ngx-recaptcha2\", inputs: { theme: \"theme\", size: \"size\", hl: \"hl\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n            multi: true,\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captchaWrapperElem\", first: true, predicate: [\"captchaWrapperElem\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `\r\n  <div #captchaWrapperElem></div>`, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ReCaptcha2Component, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-recaptcha2',\r\n                    template: `\r\n  <div #captchaWrapperElem></div>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => ReCaptcha2Component)),\r\n                            multi: true,\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i0.Injector }, { type: ScriptService }]; }, propDecorators: { theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], hl: [{\r\n                type: Input\r\n            }], captchaWrapperElem: [{\r\n                type: ViewChild,\r\n                args: ['captchaWrapperElem', { static: false }]\r\n            }] } });\n\nclass ReCaptchaV3Service {\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((resolve, reject) => {\r\n            const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n            const onRegister = grecaptcha => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then(token => this.zone.run(() => resolve(token)));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            };\r\n            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ ReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: ScriptService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ ReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ReCaptchaV3Service });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: ScriptService }, { type: i0.NgZone }]; } });\n\nclass NgxCaptchaModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxCaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxCaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxCaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxCaptchaModule, declarations: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent], imports: [CommonModule], exports: [ReCaptcha2Component,\r\n        InvisibleReCaptchaComponent] });\r\n/** @nocollapse */ /** @nocollapse */ NgxCaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxCaptchaModule, providers: [\r\n        ScriptService,\r\n        ReCaptchaV3Service\r\n    ], imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxCaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        ReCaptchaV3Service\r\n                    ],\r\n                    exports: [\r\n                        ReCaptcha2Component,\r\n                        InvisibleReCaptchaComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"]},"metadata":{},"sourceType":"module"}